<?php

namespace Modules\{{getModuleInputModule}}\Exports;

use Modules\{{getModuleInputModule}}\Models\{{modelName}};
use Maatwebsite\Excel\Concerns\FromQuery;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Alignment;

class {{modelPluralName}}Export implements FromQuery, WithHeadings, WithMapping, WithStyles, ShouldAutoSize, WithTitle
{
    protected $query;
    protected $columns;
    protected $includeStatistics;

    /**
     * Constructor
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @param array $columns
     * @param bool $includeStatistics
     */
    public function __construct($query, $columns = [], $includeStatistics = false)
    {
        $this->query = $query;
        $this->columns = !empty($columns) ? $columns : $this->getDefaultColumns();
        $this->includeStatistics = $includeStatistics;
    }

    /**
     * Get default columns if none specified
     *
     * @return array
     */
    protected function getDefaultColumns()
    {
        $model = new {{modelName}}();
        $fillable = $model->getFillable();

        // Remove system fields that shouldn't be exported by default
        $excludeFields = ['created_by', 'updated_by', 'deleted_by', 'deleted_at'];

        return array_diff($fillable, $excludeFields);
    }

    /**
     * Query for export
     *
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function query()
    {
        return $this->query;
    }

    /**
     * Column headings
     *
     * @return array
     */
    public function headings(): array
    {
        return array_map(function($column) {
            return ucwords(str_replace('_', ' ', $column));
        }, $this->columns);
    }

    /**
     * Map each row
     *
     * @param mixed $row
     * @return array
     */
    public function map($row): array
    {
        $data = [];

        foreach ($this->columns as $column) {
            // Handle relationships (e.g., user.name)
            if (strpos($column, '.') !== false) {
                $parts = explode('.', $column);
                $value = $row;
                foreach ($parts as $part) {
                    $value = $value->{$part} ?? null;
                    if ($value === null) break;
                }
                $data[] = $value;
            }
            // Handle date fields
            elseif (in_array($column, ['created_at', 'updated_at']) && $row->{$column}) {
                $data[] = $row->{$column}->format('Y-m-d H:i:s');
            }
            // Handle boolean fields
            elseif (is_bool($row->{$column})) {
                $data[] = $row->{$column} ? 'Yes' : 'No';
            }
            // Handle status fields
            elseif ($column === 'status') {
                $data[] = ucfirst($row->{$column});
            }
            // Handle regular fields
            else {
                $data[] = $row->{$column} ?? '';
            }
        }

        return $data;
    }

    /**
     * Apply styles to the worksheet
     *
     * @param Worksheet $sheet
     * @return array
     */
    public function styles(Worksheet $sheet)
    {
        // Style the header row
        $sheet->getStyle('A1:' . $sheet->getHighestColumn() . '1')->applyFromArray([
            'font' => [
                'bold' => true,
                'color' => ['rgb' => 'FFFFFF'],
                'size' => 12,
            ],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => '0D6EFD'], // Bootstrap primary blue
            ],
            'alignment' => [
                'horizontal' => Alignment::HORIZONTAL_CENTER,
                'vertical' => Alignment::VERTICAL_CENTER,
            ],
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['rgb' => '000000'],
                ],
            ],
        ]);

        // Add borders to all cells with data
        $lastRow = $sheet->getHighestRow();
        $lastColumn = $sheet->getHighestColumn();

        $sheet->getStyle('A1:' . $lastColumn . $lastRow)->applyFromArray([
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['rgb' => 'CCCCCC'],
                ],
            ],
        ]);

        // Center align all cells
        $sheet->getStyle('A2:' . $lastColumn . $lastRow)->applyFromArray([
            'alignment' => [
                'vertical' => Alignment::VERTICAL_CENTER,
            ],
        ]);

        // Set row height for header
        $sheet->getRowDimension(1)->setRowHeight(25);

        // Freeze the header row
        $sheet->freezePane('A2');

        return [];
    }

    /**
     * Sheet title
     *
     * @return string
     */
    public function title(): string
    {
        return '{{modelPluralTitle}}';
    }

    /**
     * Add statistics sheet if enabled
     *
     * @return array
     */
    public function sheets(): array
    {
        $sheets = [$this];

        if ($this->includeStatistics) {
            // You can add a statistics sheet here if needed
            // $sheets[] = new StatisticsSheet();
        }

        return $sheets;
    }
}

