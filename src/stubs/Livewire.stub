<?php

namespace Modules\{{getModuleInputModule}}\Livewire;

use Livewire\Component;
use Livewire\WithPagination;
use App\Models\{{modelName}};
use Carbon\Carbon;
use Livewire\Attributes\On;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Storage;
use Jantinnerezo\LivewireAlert\LivewireAlert;
use Intervention\Image\Facades\Image;
use Livewire\Features\SupportFileUploads\WithFileUploads;

class {{modelName}}s extends Component
{
    use WithPagination;
    use WithFileUploads;
    use LivewireAlert;
	protected $paginationTheme = 'bootstrap';
    public $selected_id, {{updatefield}};
    public $indexSearch = '';
    public $selecteditem = [];
    protected $queryString = ['indexSearch'];
    public $updateMode = false;
    #[On('closeModal')]

    public function render()
    {
        return view('{{getModuleInput}}::livewire.{{modelNamePluralLowerCase}}.view', [
            '{{modelNamePluralLowerCase}}' => {{modelName}}::latest()
                        ->search($this->indexSearch)
						->paginate(10),
        ]);
    }


    public function reload()
    {
        return $this->redirect('/{{getModuleInput}}/{{getNameInput}}');
    }

    public function updatingSearch()
    {
        $this->resetPage();
    }

    public function cancel()
    {
        $this->resetInput();
        $this->updateMode = false;
    }

    private function resetInput()
    {		{{resetfields}}
    }

    public function store()
    {
        $this->validate([{{rules}}
        ]);

        //  $photo = $this->storeImage();

        {{modelName}}::create([ {{addfields}}
        ]);

        $this->resetInput();
		$this->dispatch('closeModal');
        $this->alert('success', '{{modelName}} Successfully created!', [
            'position' => 'center',
            'timer' => 3000,
            'toast' => true,
            'timerProgressBar' => true,
           ]);
		// session()->flash('message', '{{modelName}} Successfully created.');
        return $this->redirect('/{{getModuleInput}}/{{getNameInput}}');
    }

      public function storeImage()
    {
        if (!$this->photo) {
            return null;
        }

        $image = $this->photo;
        $path = base_path("public/uploads/images/{{modelName}}/");
        $ImageName = time().'.'.$image->getClientOriginalExtension();
        if (!File::exists($path)) {
            File::makeDirectory($path, 0777, true, true);
          }
        Image::make($image)->resize(1024, 625)->save(public_path('uploads/images/{{modelName}}/{{modelName}}') . $ImageName);
        return $ImageName;
    }

    public function show($id)
    {
        $record = {{modelName}}::findOrFail($id);
        $this->selected_id = $id; {{showfields}}
        $this->updateMode = false;
    }

    public function edit($id)
    {
        $record = {{modelName}}::findOrFail($id);

        $this->selected_id = $id; {{editfields}}

        $this->updateMode = true;
    }

    public function update()
    {
        $this->validate([{{rules}}
        ]);
        // $photo = $this->storeImage();
        if ($this->selected_id) {
			$record = {{modelName}}::find($this->selected_id);
            $record->update([ {{addfields}}
            ]);

            $this->resetInput();
            $this->dispatch('closeModal');
            $this->updateMode = false;
            $this->alert('success', '{{modelName}} Successfully updated.', [
            'position' => 'center',
            'timer' => 3000,
            'toast' => true,
            'timerProgressBar' => true,
           ]);
			// session()->flash('message', '{{modelName}} Successfully updated.');
        }
    }

    public function destroy($id)
    {
        if ($id) {
            $record = {{modelName}}::where('id', $id);
            $record->delete();
        }
    }

    public function deleteselected()
    {
        $ids = $this->selecteditem;
        {{modelName}}::wherekey($ids)->delete();
        $this->selecteditem = [];
        $this->dispatch('closeModal');
        $this->alert('success', '{{modelName}} Successfully Deleted.', [
            'position' => 'center',
            'timer' => 3000,
            'toast' => true,
            'timerProgressBar' => true,
           ]);
    }

    public function deactivate($id)
    {
        if ($id) {
            $record = {{modelName}}::where('id', $id);
            $record->update([
                'status' => 2
                ]);
        $this->dispatch('closeModal');
        $this->alert('success', '{{modelName}} Successfully Deactivated.', [
            'position' => 'center',
            'timer' => 3000,
            'toast' => true,
            'timerProgressBar' => true,
           ]);
        }
    }

    public function activate($id)
    {
        if ($id) {
            $record = {{modelName}}::where('id', $id);
            $record->update([
                'status' => 1
                ]);
            $this->dispatch('closeModal');
            $this->alert('success', '{{modelName}} Successfully Activated.', [
            'position' => 'center',
            'timer' => 3000,
            'toast' => true,
            'timerProgressBar' => true,
           ]);
        }
    }

}
