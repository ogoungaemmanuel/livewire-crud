<?php

namespace Modules\{{getModuleInputModule}}\Exports;

use Livewire\Component;
use Modules\{{getModuleInputModule}}\Models\{{modelName}};
use Barryvdh\DomPDF\Facade\Pdf as PDF;
use Illuminate\Support\Facades\View;
use Livewire\Attributes\On;

class {{modelName}}Print
{
    public $record;
    public $recordId;
    public $printOptions = [
        'orientation' => 'portrait', // portrait or landscape
        'paper_size' => 'a4',       // a4, letter, legal, etc.
        'margins' => [
            'top' => 10,
            'right' => 10,
            'bottom' => 10,
            'left' => 10
        ]
    ];
    
    public $showPrintPreview = false;
    public $printFormat = 'pdf'; // pdf, html, direct

    protected $rules = [
        'printOptions.orientation' => 'required|in:portrait,landscape',
        'printOptions.paper_size' => 'required|string',
        'printFormat' => 'required|in:pdf,html,direct'
    ];

    public function mount($recordId = null)
    {
        if ($recordId) {
            $this->recordId = $recordId;
            $this->loadRecord();
        }
    }

    public function loadRecord()
    {
        if ($this->recordId) {
            $this->record = {{modelName}}::findOrFail($this->recordId);
        }
    }

    #[On('print-record')]
    public function printRecord($recordId)
    {
        $this->recordId = $recordId;
        $this->loadRecord();
        $this->showPrintPreview = true;
    }

    public function generatePdf()
    {
        if (!$this->record) {
            $this->dispatch('show-alert', [
                'type' => 'error',
                'message' => 'No record selected for printing'
            ]);
            return;
        }

        try {
            $pdf = PDF::loadView('{{getModuleInputModuleLowerCase}}::livewire.{{modelNameLowerCase}}.print', [
                'record' => $this->record,
                'printOptions' => $this->printOptions
            ]);

            // Set paper size and orientation
            $pdf->setPaper($this->printOptions['paper_size'], $this->printOptions['orientation']);

            // Set margins if supported
            if (method_exists($pdf, 'setOptions')) {
                $pdf->setOptions([
                    'margin_top' => $this->printOptions['margins']['top'] . 'mm',
                    'margin_right' => $this->printOptions['margins']['right'] . 'mm',
                    'margin_bottom' => $this->printOptions['margins']['bottom'] . 'mm',
                    'margin_left' => $this->printOptions['margins']['left'] . 'mm',
                ]);
            }

            $filename = '{{modelNameLowerCase}}_' . $this->record->id . '_' . now()->format('Y-m-d_H-i-s') . '.pdf';

            return response()->streamDownload(function () use ($pdf) {
                echo $pdf->output();
            }, $filename, [
                'Content-Type' => 'application/pdf',
            ]);

        } catch (\Exception $e) {
            $this->dispatch('show-alert', [
                'type' => 'error',
                'message' => 'Error generating PDF: ' . $e->getMessage()
            ]);
        }
    }

    public function printDirect()
    {
        if (!$this->record) {
            $this->dispatch('show-alert', [
                'type' => 'error',
                'message' => 'No record selected for printing'
            ]);
            return;
        }

        // Dispatch JavaScript event to trigger browser print
        $this->dispatch('trigger-print');
    }

    public function printHtml()
    {
        if (!$this->record) {
            $this->dispatch('show-alert', [
                'type' => 'error',
                'message' => 'No record selected for printing'
            ]);
            return;
        }

        // Return HTML view for printing
        $html = View::make('{{getModuleInputModuleLowerCase}}::livewire.{{modelNameLowerCase}}.print', [
            'record' => $this->record,
            'printOptions' => $this->printOptions
        ])->render();

        $this->dispatch('show-print-html', ['html' => $html]);
    }

    public function updatePrintOptions($option, $value)
    {
        $this->printOptions[$option] = $value;
    }

    public function resetPrintOptions()
    {
        $this->printOptions = [
            'orientation' => 'portrait',
            'paper_size' => 'a4',
            'margins' => [
                'top' => 10,
                'right' => 10,
                'bottom' => 10,
                'left' => 10
            ]
        ];
    }

    public function closePrintPreview()
    {
        $this->showPrintPreview = false;
        $this->record = null;
        $this->recordId = null;
    }

    public function render()
    {
        return view('{{getModuleInputModuleLowerCase}}::livewire.{{modelNameLowerCase}}.print-component', [
            'record' => $this->record
        ]);
    }
}