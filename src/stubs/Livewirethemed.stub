<?php

namespace Modules\{{getModuleInputModule}}\Livewire;

use Livewire\Component;
//use App\Enums\{{modelName}} as Enums{{modelName}};
use Livewire\WithPagination;
use Modules\{{getModuleInputModule}}\Models\{{modelName}};
use Carbon\Carbon;
use Livewire\Attributes\On;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Log;
use Intervention\Image\Facades\Image;
use Livewire\Features\SupportFileUploads\WithFileUploads;
use Maatwebsite\Excel\Facades\Excel;
use Illuminate\Support\Facades\DB;
use Barryvdh\DomPDF\Facade\Pdf as PDF;
use Modules\{{getModuleInputModule}}\Exports\{{modelPluralName}}Export;
use Modules\{{getModuleInputModule}}\Exports\{{modelName}}PdfExport;
use Modules\{{getModuleInputModule}}\Imports\{{modelPluralName}}Import;
use Modules\{{getModuleInputModule}}\Notifications\{{modelName}}Notification;
use Illuminate\Support\Facades\Mail;
use Modules\{{getModuleInputModule}}\Emails\{{modelName}}Email;
use Modules\{{getModuleInputModule}}\Charts\{{modelName}}Chart;
use Modules\{{getModuleInputModule}}\Fullcalendar\{{modelName}}Calendar;

class {{modelPluralName}} extends Component
{
    use WithPagination;
    use WithFileUploads;
	protected $paginationTheme = 'bootstrap';

    // Form fields
    public $selected_id, $newimage, {{updatefield}};
    public ${{modelNameLowerCase}};

    // Search and filters
    public $indexSearch = '';
    public $search = '';
    public $filterStatus = '';
    public $filterDateRange = '';
    public $perPage = 10;

    // Sorting
    public $sortField = 'created_at';
    public $sortDirection = 'desc';

    // Bulk operations
    public $selecteditem = [];
    public $selectedItems = [];
    public $selectAll = false;
    public $confirmDelete = false;

    // Chart and Analytics properties
    public $chartPeriod = 'month';
    public $chartType = 'line';
    public $chartData = [];
    public $analyticsFilters = [];
    public $customChartConfig = [];

    // Calendar properties
    public $calendarView = 'month';
    public $calendarDate;
    public $calendarEvents = [];
    public $selectedEvent = null;
    public $eventTitle = '';
    public $eventDescription = '';
    public $eventStart = '';
    public $eventEnd = '';
    public $eventStatus = 'active';
    public $eventAllDay = false;
    public $eventRecurring = false;
    public $eventFrequency = 'weekly';

    // Print properties
    public $printFormat = 'pdf';
    public $printOrientation = 'portrait';
    public $printPaperSize = 'a4';
    public $printTemplate = 'default';
    public $printOptions = [];
    public $printColumns = [];
    public $printIncludeHeader = true;
    public $printIncludeFooter = true;
    public $printIncludeLogo = true;

    // Notification properties
    public $notificationChannels = ['database', 'mail'];
    public $notificationTemplate = 'default';
    public $notificationRecipients = [];
    public $notificationScheduled = false;
    public $notificationScheduleDate = null;
    public $notificationPriority = 'normal';
    public $customNotificationData = [];

    // Email properties
    public $emailSubject = '';
    public $emailBody = '';
    public $emailRecipient = '';
    public $emailAttachment = null;
    public $emailResults = [];
    public $emailSending = false;
    public $emailRecordId = null;
    public $emailAll = false;
    public $emailSelectedItems = [];
    public $emailFilters = [];
    public $emailIncludeStatistics = false;

    // Export properties
    public $exportFormat = 'excel';
    public $exportRange = 'all';
    public $exportDateRange = '';
    public $exportStartDate = null;
    public $exportEndDate = null;
    public $exportColumns = [];
    public $selectAllColumns = true;
    public $availableColumns = [];
    public $pdfOrientation = 'portrait';
    public $pdfPaperSize = 'a4';
    public $includeStatistics = true;
    public $exportFileName = '';

    // Advanced PDF Export properties
    public $pdfTemplate = 'default';
    public $pdfWatermark = null;
    public $pdfPassword = null;
    public $pdfCompress = false;
    public $pdfCustomCss = null;
    public $exportFilters = [];
    public $exportSummary = true;
    public $exportCharts = false;
    public $batchExport = false;
    public $batchSize = 1000;

    // Import
    public $importFile;
    public $importResults = [];

    protected $queryString = ['indexSearch', 'search', 'sortField', 'sortDirection'];
    public $updateMode = false;

    #[On('refresh-the-component')]

     // public function mount()
    // {
    //     $this->posted_by = User_Detail()->name;
    //     $this->status = 'active';
    // }

    public function mount()
    {
        // Initialize available columns for export
        $model = new {{modelName}}();
        $this->availableColumns = $model->getFillable();
        $this->exportColumns = $this->availableColumns;

        // Initialize calendar date
        $this->calendarDate = now()->format('Y-m-d');

        // Initialize print columns
        $this->printColumns = $this->availableColumns;

        // Initialize notification recipients
        $this->notificationRecipients = [auth()->user()->email ?? 'admin@example.com'];

        // Initialize export filters
        $this->exportFilters = [
            'show_headers' => true,
            'show_filters' => true,
            'show_summary' => true,
            'include_charts' => false,
            'compress' => false,
        ];
    }

    public function updatedSelectAllColumns($value)
    {
        if ($value) {
            $this->exportColumns = $this->availableColumns;
        } else {
            $this->exportColumns = [];
        }
    }

    public function render()
    {
        $query = {{modelName}}::query();

        // Apply search
        if ($this->search || $this->indexSearch) {
            $query->search($this->search ?: $this->indexSearch);
        }

        // Apply filters
        if ($this->filterStatus) {
            $query->where('status', $this->filterStatus);
        }

        if ($this->filterDateRange) {
            $query->whereBetween('created_at', $this->getDateRange($this->filterDateRange));
        }

        // Apply sorting
        $query->orderBy($this->sortField, $this->sortDirection);

        return view('{{getModuleInput}}::livewire.' . My_Theme() . '.{{modelNamePluralLowerCase}}.view', [
            '{{modelNamePluralLowerCase}}' => $query->paginate($this->perPage),
            'total{{modelPluralTitle}}' => $this->getTotalCount(),
            'active{{modelPluralTitle}}' => $this->getActiveCount(),
            'inactive{{modelPluralTitle}}' => $this->getInactiveCount(),
            'thisMonth{{modelPluralTitle}}' => $this->getThisMonthCount(),
        ]);
    }

    protected function getDateRange($range)
    {
        return match($range) {
            'today' => [now()->startOfDay(), now()->endOfDay()],
            'week' => [now()->startOfWeek(), now()->endOfWeek()],
            'month' => [now()->startOfMonth(), now()->endOfMonth()],
            'year' => [now()->startOfYear(), now()->endOfYear()],
            default => [now()->subYears(100), now()],
        };
    }

    protected function getTotalCount()
    {
        return {{modelName}}::count();
    }

    protected function getActiveCount()
    {
        return {{modelName}}::where('status', 'active')->count();
    }

    protected function getInactiveCount()
    {
        return {{modelName}}::where('status', 'inactive')->count();
    }

    protected function getThisMonthCount()
    {
        return {{modelName}}::whereBetween('created_at', [now()->startOfMonth(), now()->endOfMonth()])->count();
    }

    public function closeModal()
    {
        $this->resetInput();
        $this->updateMode = false;
    }

    public function showModal()
    {
        $this->resetInput();
        $this->updateMode = false;
    }

    public function create{{modelName}}()
    {
        $this->resetInput();
        $this->updateMode = false;
    }

    public function view{{modelName}}($id)
    {
        $this->show($id);
    }

    public function edit{{modelName}}($id)
    {
        $this->edit($id);
    }

    public function delete{{modelName}}($id)
    {
        $this->selected_id = $id;
        $record = {{modelName}}::findOrFail($id);
        $this->{{modelNameLowerCase}} = $record;
    }

    public function import{{modelPluralTitle}}()
    {
        $this->reset(['importFile', 'importResults']);
    }


 public function updatingIndexSearch()
    {
        $this->resetPage();
    }


    public function updatedSelectAll($value)
    {
        if ($value) {
            $this->selectedItems = {{modelName}}::pluck('id')->toArray();
        } else {
            $this->selectedItems = [];
        }
    }

    public function sortBy($field)
    {
        if ($this->sortField === $field) {
            $this->sortDirection = $this->sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            $this->sortField = $field;
            $this->sortDirection = 'asc';
        }
    }

    public function resetFilters()
    {
        $this->reset(['search', 'indexSearch', 'filterStatus', 'filterDateRange', 'perPage']);
        $this->perPage = 10;
        $this->resetPage();
    }

    public function reload()
    {
        return $this->redirect('/{{getModuleInput}}/{{getNameInput}}',navigate:true);
    }

    public function updatingSearch()
    {
        $this->resetPage();
    }

    public function cancel()
    {
        $this->resetInput();
        $this->updateMode = false;
    }

    private function resetInput()
    {		{{resetfields}}
    }

    public function refreshTheComponent()
    {
        $this->dispatch('$refresh');
    }

    public function store()
    {
        $this->validate([{{rules}}
        ]);

         // if (!$this->newimage) {
        //     $photo = $this->photo;
        // }else{
        //     $photo = $this->storeImage();
        // }


        $record = {{modelName}}::create([ {{addfields}}
        ]);

        // Send notification
        $record->notify(new {{modelName}}Notification($record, {{modelName}}Notification::TYPE_CREATED, auth()->user()));

        // Send email notification if configured
        $this->sendNotificationEmail($record->id, 'created');

        $this->resetInput();
		$this->dispatch('closeModal');
        flash()->addSuccess('{{modelName}} Successfully created!');
		// session()->flash('message', '{{modelName}} Successfully created.');
        return $this->redirect('/{{getModuleInput}}/{{getNameInput}}',navigate:true);
    }

      public function storeImage()
    {
        if (!$this->newimage) {
            return null;
        }

        $image = $this->newimage;
        $path = base_path("public/uploads/images/{{modelName}}/");
        $ImageName = time().'.'.$image->getClientOriginalExtension();
        if (!File::exists($path)) {
            File::makeDirectory($path, 0777, true, true);
          }
          if(File::exists(public_path('uploads/images/{{modelName}}/{{modelName}}' . $this->photo))){
            File::delete(public_path('uploads/images/{{modelName}}/{{modelName}}' . $this->photo));
          }
        Image::make($image)->resize(1024, 625)->save(public_path('uploads/images/{{modelName}}/{{modelName}}') . $ImageName);
        return $ImageName;
    }

    public function show($id)
    {
        $record = {{modelName}}::findOrFail($id);
        $this->selected_id = $id; {{showfields}}
        $this->{{modelNameLowerCase}} = $record;
        $this->updateMode = false;
    }

    public function edit($id)
    {
        $record = {{modelName}}::findOrFail($id);

        $this->selected_id = $id; {{editfields}}

        $this->updateMode = true;
    }

    public function update()
    {
        $this->validate([{{rules}}
        ]);
        // if (!$this->newimage) {
        //     $photo = $this->photo;
        // }else{
        //     $photo = $this->storeImage();
        // }

        if ($this->selected_id) {
			$record = {{modelName}}::find($this->selected_id);
            $record->update([ {{addfields}}
            ]);

            // Send notification
            $record->notify(new {{modelName}}Notification($record, {{modelName}}Notification::TYPE_UPDATED, auth()->user()));

            // Send email notification if configured
            $this->sendNotificationEmail($record->id, 'updated');

            $this->resetInput();
            $this->dispatch('closeModal');
            $this->updateMode = false;
            flash()->addSuccess('{{modelName}} Successfully updated.');
           return $this->redirect('/{{getModuleInput}}/{{getNameInput}}',navigate:true);
			// session()->flash('message', '{{modelName}} Successfully updated.');
        }
    }

    public function destroy($id)
    {
        if ($id) {
            $record = {{modelName}}::find($id);

            if ($record) {
                // Send notification before deletion
                $record->notify(new {{modelName}}Notification($record, {{modelName}}Notification::TYPE_DELETED, auth()->user()));

                // Send email notification if configured
                $this->sendNotificationEmail($record->id, 'deleted');

                $record->delete();
            }

            $this->dispatch('closeModal');
            flash()->addSuccess('{{modelName}} Successfully Deleted.');
        }
    }

    // Import Methods
    public function import()
    {
        $this->validate(['importFile' => 'required|file|mimes:xlsx,xls,csv|max:10240']);

        try {
            $importInstance = new {{modelPluralName}}Import;
            Excel::import($importInstance, $this->importFile);

            // Get import count (you may need to modify your Import class to track this)
            $importedCount = $importInstance->getRowCount() ?? 0;

            $this->importResults = [
                'success' => true,
                'message' => '{{modelPluralTitle}} imported successfully!',
            ];

            // Send import completion notification via email
            if (auth()->user()) {
                Mail::to(auth()->user())->send(
                    new {{modelName}}Email(
                        null,
                        null,
                        {{modelName}}Email::TYPE_IMPORT_RESULTS,
                        "{{modelPluralTitle}} Import Completed",
                        "Your import has been completed successfully.",
                        false,
                        true,
                        auth()->user(),
                        [
                            'imported_count' => $importedCount,
                            'import_file' => $this->importFile->getClientOriginalName()
                        ]
                    )
                );
            }

            flash()->addSuccess($this->importResults['message']);
            $this->dispatch('closeModal');
            return $this->redirect('/{{getModuleInput}}/{{getNameInput}}', navigate: true);

        } catch (\Exception $e) {
            $this->importResults = [
                'success' => false,
                'message' => 'Import failed: ' . $e->getMessage(),
            ];
            flash()->addError($this->importResults['message']);
        }
    }

    public function export()
    {
        try {
            // Build export query based on range
            $query = $this->getExportQuery();

            // Apply date range if specified
            if ($this->exportDateRange && $this->exportDateRange !== '') {
                $query = $this->applyDateRange($query);
            }

            // Get filename
            $filename = $this->exportFileName ?: Str::slug('{{modelName}}') . '_' . now()->format('Y-m-d_His');

            // Use the advanced PDF export class for better functionality
            if ($this->exportFormat === 'pdf') {
                return $this->exportAdvancedPdf($query);
            }

            // Export based on format
            switch ($this->exportFormat) {
                case 'excel':
                    return Excel::download(
                        new {{modelPluralName}}Export($query, $this->exportColumns, $this->includeStatistics),
                        $filename . '.xlsx'
                    );

                case 'csv':
                    return Excel::download(
                        new {{modelPluralName}}Export($query, $this->exportColumns, $this->includeStatistics),
                        $filename . '.csv',
                        \Maatwebsite\Excel\Excel::CSV
                    );

                case 'pdf':
                    $data = [
                        'records' => $query->get(),
                        'columns' => $this->exportColumns,
                        'includeStatistics' => $this->includeStatistics,
                        'statistics' => $this->includeStatistics ? [
                            'total' => $this->getTotalCount(),
                            'active' => $this->getActiveCount(),
                            'inactive' => $this->getInactiveCount(),
                            'thisMonth' => $this->getThisMonthCount(),
                        ] : null,
                        'filters' => [
                            'search' => $this->search,
                            'status' => $this->filterStatus,
                            'dateRange' => $this->exportDateRange,
                        ],
                    ];

                    $pdf = PDF::loadView('{{getModuleInput}}::livewire.{{modelNamePluralLowerCase}}.pdf-export', $data)
                        ->setPaper($this->pdfPaperSize, $this->pdfOrientation);

                    return response()->streamDownload(function () use ($pdf) {
                        echo $pdf->output();
                    }, $filename . '.pdf');
            }

            $this->dispatch('show-notification', message: 'Export completed successfully!', type: 'success');

        } catch (\Exception $e) {
            $this->dispatch('show-notification', message: 'Export failed: ' . $e->getMessage(), type: 'error');
            Log::error('Export error: ' . $e->getMessage());
        }
    }

    // Advanced PDF Export Methods
    public function exportAdvancedPdf($query = null)
    {
        try {
            $query = $query ?: $this->getExportQuery();
            $data = $query->get();

            $filters = array_merge($this->getAppliedFilters(), $this->exportFilters);

            $options = [
                'title' => $this->exportFileName ?: '{{modelPluralTitle}} Export Report',
                'orientation' => $this->pdfOrientation,
                'paper_size' => $this->pdfPaperSize,
                'show_headers' => $filters['show_headers'] ?? true,
                'show_filters' => $filters['show_filters'] ?? true,
                'show_summary' => $this->exportSummary,
                'include_charts' => $this->exportCharts,
                'compress' => $this->pdfCompress,
                'password' => $this->pdfPassword,
                'watermark' => $this->pdfWatermark,
                'custom_css' => $this->pdfCustomCss,
            ];

            $export = new {{modelName}}PdfExport($data, $filters, 'pdf', $this->pdfTemplate, $options);

            return $export->export();

        } catch (\Exception $e) {
            flash()->addError('Advanced PDF export failed: ' . $e->getMessage());
            Log::error('Advanced PDF export error: ' . $e->getMessage());
        }
    }

    public function exportToStorage($disk = 'local', $path = 'exports')
    {
        try {
            $query = $this->getExportQuery();
            $data = $query->get();

            $filters = array_merge($this->getAppliedFilters(), $this->exportFilters);

            $options = [
                'title' => $this->exportFileName ?: '{{modelPluralTitle}} Export Report',
                'orientation' => $this->pdfOrientation,
                'paper_size' => $this->pdfPaperSize,
                'show_summary' => $this->exportSummary,
                'include_charts' => $this->exportCharts,
            ];

            $export = new {{modelName}}PdfExport($data, $filters, $this->exportFormat, $this->pdfTemplate, $options);

            $filePath = $export->saveToStorage($disk, $path);

            flash()->addSuccess("Export saved to storage: {$filePath}");

            return $filePath;

        } catch (\Exception $e) {
            flash()->addError('Failed to save export to storage: ' . $e->getMessage());
            Log::error('Export to storage error: ' . $e->getMessage());
        }
    }

    public function exportBatch($batchSize = null)
    {
        try {
            $batchSize = $batchSize ?: $this->batchSize;
            $query = $this->getExportQuery();
            $totalRecords = $query->count();

            if ($totalRecords <= $batchSize) {
                // Small dataset, export normally
                return $this->exportAdvancedPdf($query);
            }

            // Large dataset, process in batches
            $batches = ceil($totalRecords / $batchSize);
            $exportedFiles = [];

            for ($i = 0; $i < $batches; $i++) {
                $offset = $i * $batchSize;
                $batchQuery = clone $query;
                $batchData = $batchQuery->skip($offset)->take($batchSize)->get();

                $filters = array_merge($this->getAppliedFilters(), $this->exportFilters);

                $options = [
                    'title' => $this->exportFileName ?: "{{modelPluralTitle}} Export Batch " . ($i + 1),
                    'orientation' => $this->pdfOrientation,
                    'paper_size' => $this->pdfPaperSize,
                    'show_summary' => $i === 0 ? $this->exportSummary : false, // Only show summary in first batch
                    'include_charts' => $i === 0 ? $this->exportCharts : false,
                ];

                $export = new {{modelName}}PdfExport($batchData, $filters, $this->exportFormat, $this->pdfTemplate, $options);
                $filePath = $export->saveToStorage('local', 'exports/batches');

                $exportedFiles[] = $filePath;
            }

            flash()->addSuccess("Large dataset exported in {$batches} batches. Files saved to storage.");

            return $exportedFiles;

        } catch (\Exception $e) {
            flash()->addError('Batch export failed: ' . $e->getMessage());
            Log::error('Batch export error: ' . $e->getMessage());
        }
    }

    public function exportCustomTemplate($templateName, $customOptions = [])
    {
        try {
            $query = $this->getExportQuery();
            $data = $query->get();

            $filters = array_merge($this->getAppliedFilters(), $this->exportFilters);

            $options = array_merge([
                'title' => $this->exportFileName ?: '{{modelPluralTitle}} Custom Export',
                'orientation' => $this->pdfOrientation,
                'paper_size' => $this->pdfPaperSize,
                'show_summary' => $this->exportSummary,
                'include_charts' => $this->exportCharts,
            ], $customOptions);

            $export = new {{modelName}}PdfExport($data, $filters, $this->exportFormat, $templateName, $options);

            return $export->export();

        } catch (\Exception $e) {
            flash()->addError('Custom template export failed: ' . $e->getMessage());
            Log::error('Custom template export error: ' . $e->getMessage());
        }
    }

    public function previewExport($format = 'pdf')
    {
        try {
            $query = $this->getExportQuery();
            $previewData = $query->take(10)->get(); // Only preview first 10 records

            $filters = array_merge($this->getAppliedFilters(), $this->exportFilters);

            $options = array_merge($this->exportFilters, [
                'title' => 'Preview: ' . ($this->exportFileName ?: '{{modelPluralTitle}} Export'),
                'orientation' => $this->pdfOrientation,
                'paper_size' => $this->pdfPaperSize,
                'preview' => true,
            ]);

            $export = new {{modelName}}PdfExport($previewData, $filters, $format, $this->pdfTemplate, $options);

            if ($format === 'pdf') {
                $content = $export->getExportContent();
                $this->dispatch('show-export-preview', ['content' => base64_encode($content), 'type' => 'pdf']);
            } else {
                $content = $export->getExportContent();
                $this->dispatch('show-export-preview', ['content' => $content, 'type' => $format]);
            }

        } catch (\Exception $e) {
            flash()->addError('Export preview failed: ' . $e->getMessage());
            Log::error('Export preview error: ' . $e->getMessage());
        }
    }

    public function exportWithCharts()
    {
        try {
            $this->exportCharts = true;
            $query = $this->getExportQuery();
            $data = $query->get();

            // Load chart data for export
            $chartService = new {{modelName}}Chart();
            $chartData = [
                'status_distribution' => $chartService->getStatusDistributionData(),
                'monthly_trends' => $chartService->getCreatedOverTimeData('month'),
                'analytics_summary' => $chartService->getRealTimeStats(),
            ];

            $filters = array_merge($this->getAppliedFilters(), $this->exportFilters, [
                'chart_data' => $chartData
            ]);

            $options = [
                'title' => $this->exportFileName ?: '{{modelPluralTitle}} Analytics Report',
                'orientation' => 'landscape', // Better for charts
                'paper_size' => $this->pdfPaperSize,
                'show_summary' => true,
                'include_charts' => true,
            ];

            $export = new {{modelName}}PdfExport($data, $filters, 'pdf', 'detailed', $options);

            return $export->export();

        } catch (\Exception $e) {
            flash()->addError('Chart export failed: ' . $e->getMessage());
            Log::error('Chart export error: ' . $e->getMessage());
        }
    }

    public function exportSelectedRecords($ids = null)
    {
        try {
            $selectedIds = $ids ?: $this->selectedItems;

            if (empty($selectedIds)) {
                flash()->addWarning('No records selected for export.');
                return;
            }

            $data = {{modelName}}::whereIn('id', $selectedIds)->get();

            $filters = [
                'selection_type' => 'selected',
                'selected_count' => count($selectedIds),
            ];

            $options = [
                'title' => $this->exportFileName ?: '{{modelPluralTitle}} Selected Records Export',
                'orientation' => $this->pdfOrientation,
                'paper_size' => $this->pdfPaperSize,
                'show_summary' => true,
            ];

            $export = new {{modelName}}PdfExport($data, $filters, $this->exportFormat, $this->pdfTemplate, $options);

            return $export->export();

        } catch (\Exception $e) {
            flash()->addError('Selected records export failed: ' . $e->getMessage());
            Log::error('Selected records export error: ' . $e->getMessage());
        }
    }

    public function setPdfOptions($options)
    {
        $this->pdfTemplate = $options['template'] ?? $this->pdfTemplate;
        $this->pdfOrientation = $options['orientation'] ?? $this->pdfOrientation;
        $this->pdfPaperSize = $options['paper_size'] ?? $this->pdfPaperSize;
        $this->pdfWatermark = $options['watermark'] ?? $this->pdfWatermark;
        $this->pdfPassword = $options['password'] ?? $this->pdfPassword;
        $this->pdfCompress = $options['compress'] ?? $this->pdfCompress;
        $this->pdfCustomCss = $options['custom_css'] ?? $this->pdfCustomCss;

        $this->dispatch('pdf-options-updated', $options);
    }

    public function resetExportSettings()
    {
        $this->exportFormat = 'excel';
        $this->exportRange = 'all';
        $this->exportDateRange = '';
        $this->exportStartDate = null;
        $this->exportEndDate = null;
        $this->exportColumns = $this->availableColumns;
        $this->selectAllColumns = true;
        $this->pdfOrientation = 'portrait';
        $this->pdfPaperSize = 'a4';
        $this->includeStatistics = true;
        $this->exportFileName = '';
        $this->pdfTemplate = 'default';
        $this->pdfWatermark = null;
        $this->pdfPassword = null;
        $this->pdfCompress = false;
        $this->exportSummary = true;
        $this->exportCharts = false;

        $this->dispatch('export-settings-reset');
    }

    protected function getExportQuery()
    {
        $query = {{modelName}}::query();

        // Apply filters based on export range
        switch ($this->exportRange) {
            case 'filtered':
                // Apply current filters
                if ($this->search) {
                    $query->search($this->search);
                }
                if ($this->filterStatus !== '') {
                    $query->where('status', $this->filterStatus);
                }
                break;

            case 'selected':
                // Only selected items
                if (count($this->selectedItems) > 0) {
                    $query->whereIn('id', $this->selectedItems);
                }
                break;

            case 'current_page':
                // Current page items
                $perPage = $this->perPage;
                $page = Livewire::request()->page ?? 1;
                $query->skip(($page - 1) * $perPage)->take($perPage);
                break;

            // 'all' - no additional filters
        }

        return $query;
    }

    protected function applyDateRange($query)
    {
        $today = now();

        switch ($this->exportDateRange) {
            case 'today':
                $query->whereDate('created_at', $today);
                break;

            case 'yesterday':
                $query->whereDate('created_at', $today->copy()->subDay());
                break;

            case 'this_week':
                $query->whereBetween('created_at', [
                    $today->copy()->startOfWeek(),
                    $today->copy()->endOfWeek()
                ]);
                break;

            case 'last_week':
                $query->whereBetween('created_at', [
                    $today->copy()->subWeek()->startOfWeek(),
                    $today->copy()->subWeek()->endOfWeek()
                ]);
                break;

            case 'this_month':
                $query->whereMonth('created_at', $today->month)
                      ->whereYear('created_at', $today->year);
                break;

            case 'last_month':
                $query->whereMonth('created_at', $today->copy()->subMonth()->month)
                      ->whereYear('created_at', $today->copy()->subMonth()->year);
                break;

            case 'this_year':
                $query->whereYear('created_at', $today->year);
                break;

            case 'last_year':
                $query->whereYear('created_at', $today->copy()->subYear()->year);
                break;

            case 'custom':
                if ($this->exportStartDate) {
                    $query->whereDate('created_at', '>=', $this->exportStartDate);
                }
                if ($this->exportEndDate) {
                    $query->whereDate('created_at', '<=', $this->exportEndDate);
                }
                break;
        }

        return $query;
    }

    public function downloadTemplate()
    {
        // Get fillable fields from the model
        $model = new {{modelName}}();
        $fillable = $model->getFillable();

        // Remove system fields that shouldn't be in import template
        $excludeFields = ['created_at', 'updated_at', 'deleted_at', 'created_by', 'updated_by', 'deleted_by'];
        $headers = array_diff($fillable, $excludeFields);

        // Convert to readable format (snake_case to Title Case)
        $headers = array_map(function($header) {
            return ucwords(str_replace('_', ' ', $header));
        }, $headers);

        $templateData = [$headers];

        return response()->streamDownload(function() use ($templateData) {
            $file = fopen('php://output', 'w');
            foreach ($templateData as $row) {
                fputcsv($file, $row);
            }
            fclose($file);
        }, '{{modelNamePluralLowerCase}}-template.csv', ['Content-Type' => 'text/csv']);
    }

    // Chart and Analytics Methods
    public function loadChartData($chartType = 'line', $period = 'month')
    {
        try {
            $chartService = new {{modelName}}Chart();

            switch ($chartType) {
                case 'status_distribution':
                    $this->chartData = $chartService->getStatusDistributionData();
                    break;

                case 'monthly_comparison':
                    $this->chartData = $chartService->getMonthlyComparisonData();
                    break;

                case 'trend_analysis':
                    $this->chartData = $chartService->getTrendAnalysisData();
                    break;

                case 'heatmap':
                    $this->chartData = $chartService->getHeatmapData();
                    break;

                case 'gauge':
                    $this->chartData = $chartService->getGaugeChartData();
                    break;

                default:
                    $this->chartData = $chartService->getCreatedOverTimeData($period);
            }

            $this->dispatch('chart-data-updated', $this->chartData);
            return $this->chartData;

        } catch (\Exception $e) {
            flash()->addError('Failed to load chart data: ' . $e->getMessage());
            return [];
        }
    }

    public function updateChartPeriod($period)
    {
        $this->chartPeriod = $period;
        $this->loadChartData($this->chartType, $period);
    }

    public function changeChartType($type)
    {
        $this->chartType = $type;
        $this->loadChartData($type, $this->chartPeriod);
    }

    public function exportChartData($format = 'json')
    {
        try {
            $chartService = new {{modelName}}Chart();
            $exportData = $chartService->exportChartData($this->chartData, $format);

            $filename = '{{modelNamePluralLowerCase}}_chart_' . $this->chartType . '_' . now()->format('Y-m-d_His');

            return response()->streamDownload(function() use ($exportData) {
                echo $exportData;
            }, $filename . '.' . $format);

        } catch (\Exception $e) {
            flash()->addError('Failed to export chart data: ' . $e->getMessage());
        }
    }

    public function createCustomChart($config)
    {
        try {
            $this->customChartConfig = $config;
            $chartService = new {{modelName}}Chart();

            $chartData = $chartService->getCustomAggregationData(
                $config['groupBy'],
                $config['aggregation'],
                $config['aggregateField'] ?? '*',
                $config['filters'] ?? []
            );

            $this->dispatch('custom-chart-created', $chartData);
            flash()->addSuccess('Custom chart created successfully!');

            return $chartData;

        } catch (\Exception $e) {
            flash()->addError('Failed to create custom chart: ' . $e->getMessage());
            return [];
        }
    }

    public function getAnalyticsStats()
    {
        try {
            $chartService = new {{modelName}}Chart();
            return $chartService->getRealTimeStats();

        } catch (\Exception $e) {
            flash()->addError('Failed to load analytics stats: ' . $e->getMessage());
            return [];
        }
    }

    // Calendar Methods
    public function loadCalendarEvents()
    {
        try {
            $calendar = new {{modelName}}Calendar();
            $this->calendarEvents = $calendar->getEvents(request());

            $this->dispatch('calendar-events-loaded', $this->calendarEvents);
            return $this->calendarEvents;

        } catch (\Exception $e) {
            flash()->addError('Failed to load calendar events: ' . $e->getMessage());
            return [];
        }
    }

    public function createCalendarEvent()
    {
        $this->validate([
            'eventTitle' => 'required|string|max:255',
            'eventStart' => 'required|date',
        ]);

        try {
            $calendar = new {{modelName}}Calendar();

            $eventData = [
                'title' => $this->eventTitle,
                'start' => $this->eventStart,
                'end' => $this->eventEnd,
                'description' => $this->eventDescription,
                'status' => $this->eventStatus,
                'all_day' => $this->eventAllDay,
                'recurring' => $this->eventRecurring,
                'recurring_frequency' => $this->eventFrequency,
            ];

            $event = $calendar->createEvent($eventData);

            // Send notification
            $event->notify(new {{modelName}}Notification(
                $event,
                {{modelName}}Notification::TYPE_CALENDAR_EVENT_CREATED,
                auth()->user(),
                ['event_title' => $this->eventTitle]
            ));

            $this->resetCalendarForm();
            $this->loadCalendarEvents();

            flash()->addSuccess('Calendar event created successfully!');
            $this->dispatch('closeModal');

        } catch (\Exception $e) {
            flash()->addError('Failed to create calendar event: ' . $e->getMessage());
        }
    }

    public function updateCalendarEvent($eventId)
    {
        $this->validate([
            'eventTitle' => 'required|string|max:255',
            'eventStart' => 'required|date',
        ]);

        try {
            $calendar = new {{modelName}}Calendar();

            $eventData = [
                'title' => $this->eventTitle,
                'start' => $this->eventStart,
                'end' => $this->eventEnd,
                'description' => $this->eventDescription,
                'status' => $this->eventStatus,
                'all_day' => $this->eventAllDay,
                'recurring' => $this->eventRecurring,
                'recurring_frequency' => $this->eventFrequency,
            ];

            $event = $calendar->updateEvent($eventId, $eventData);

            // Send notification
            $event->notify(new {{modelName}}Notification(
                $event,
                {{modelName}}Notification::TYPE_CALENDAR_EVENT_UPDATED,
                auth()->user(),
                ['event_title' => $this->eventTitle]
            ));

            $this->resetCalendarForm();
            $this->loadCalendarEvents();

            flash()->addSuccess('Calendar event updated successfully!');
            $this->dispatch('closeModal');

        } catch (\Exception $e) {
            flash()->addError('Failed to update calendar event: ' . $e->getMessage());
        }
    }

    public function deleteCalendarEvent($eventId)
    {
        try {
            $calendar = new {{modelName}}Calendar();
            $event = {{modelName}}::findOrFail($eventId);

            // Send notification before deletion
            $event->notify(new {{modelName}}Notification(
                $event,
                {{modelName}}Notification::TYPE_CALENDAR_EVENT_DELETED,
                auth()->user(),
                ['event_title' => $event->title ?? "Event #{$eventId}"]
            ));

            $calendar->deleteEvent($eventId);
            $this->loadCalendarEvents();

            flash()->addSuccess('Calendar event deleted successfully!');

        } catch (\Exception $e) {
            flash()->addError('Failed to delete calendar event: ' . $e->getMessage());
        }
    }

    public function moveCalendarEvent($eventId, $newStart, $newEnd = null)
    {
        try {
            $calendar = new {{modelName}}Calendar();

            $eventData = [
                'start' => $newStart,
                'end' => $newEnd,
            ];

            $event = $calendar->updateEvent($eventId, $eventData);
            $this->loadCalendarEvents();

            flash()->addSuccess('Calendar event moved successfully!');

        } catch (\Exception $e) {
            flash()->addError('Failed to move calendar event: ' . $e->getMessage());
        }
    }

    public function changeCalendarView($view)
    {
        $this->calendarView = $view;
        $this->dispatch('calendar-view-changed', $view);
    }

    public function exportCalendar($format = 'ical', $startDate = null, $endDate = null)
    {
        try {
            $calendar = new {{modelName}}Calendar();

            $start = $startDate ? Carbon::parse($startDate) : Carbon::now()->startOfMonth();
            $end = $endDate ? Carbon::parse($endDate) : Carbon::now()->endOfMonth();

            $exportData = $calendar->exportEvents($format, $start, $end);

            $filename = '{{modelNamePluralLowerCase}}_calendar_' . now()->format('Y-m-d_His');
            $extension = $format === 'ical' ? 'ics' : $format;

            return response()->streamDownload(function() use ($exportData) {
                echo $exportData;
            }, $filename . '.' . $extension);

        } catch (\Exception $e) {
            flash()->addError('Failed to export calendar: ' . $e->getMessage());
        }
    }

    public function getCalendarStatistics()
    {
        try {
            $calendar = new {{modelName}}Calendar();
            return $calendar->getEventStatistics();

        } catch (\Exception $e) {
            flash()->addError('Failed to load calendar statistics: ' . $e->getMessage());
            return [];
        }
    }

    public function searchCalendarEvents($query, $startDate = null, $endDate = null)
    {
        try {
            $calendar = new {{modelName}}Calendar();

            $start = $startDate ? Carbon::parse($startDate) : null;
            $end = $endDate ? Carbon::parse($endDate) : null;

            $events = $calendar->searchEvents($query, $start, $end);

            $this->dispatch('calendar-search-results', $events->toArray());
            return $events;

        } catch (\Exception $e) {
            flash()->addError('Failed to search calendar events: ' . $e->getMessage());
            return collect();
        }
    }

    public function resetCalendarForm()
    {
        $this->eventTitle = '';
        $this->eventDescription = '';
        $this->eventStart = '';
        $this->eventEnd = '';
        $this->eventStatus = 'active';
        $this->eventAllDay = false;
        $this->eventRecurring = false;
        $this->eventFrequency = 'weekly';
        $this->selectedEvent = null;
    }

    // Enhanced Print Methods
    public function printReport($type = 'pdf', $orientation = 'portrait', $paperSize = 'a4')
    {
        try {
            $print = new {{modelName}}Print();

            $this->printFormat = $type;
            $this->printOrientation = $orientation;
            $this->printPaperSize = $paperSize;

            $data = [
                'type' => $type,
                'orientation' => $orientation,
                'paper_size' => $paperSize,
                'template' => $this->printTemplate,
                'options' => $this->printOptions,
                'data' => $this->{{modelNamePluralLowerCase}},
                'filters' => $this->filters,
                'sort_field' => $this->sortField,
                'sort_direction' => $this->sortDirection,
            ];

            $result = $print->generateReport($data);

            $this->dispatch('print-report-generated', ['url' => $result['url']]);

            flash()->addSuccess('Report generated successfully!');
            return $result;

        } catch (\Exception $e) {
            flash()->addError('Failed to generate report: ' . $e->getMessage());
        }
    }

    public function printRow($id, $template = null)
    {
        try {
            ${{modelNameSingularLowerCase}} = {{modelName}}::findOrFail($id);
            $print = new {{modelName}}Print();

            $data = [
                'type' => $this->printFormat,
                'orientation' => $this->printOrientation,
                'paper_size' => $this->printPaperSize,
                'template' => $template ?: $this->printTemplate,
                'options' => $this->printOptions,
                'record' => ${{modelNameSingularLowerCase}},
            ];

            $result = $print->generateSingleRecord($data);

            $this->dispatch('print-record-generated', ['url' => $result['url']]);

            flash()->addSuccess('{{modelTitle}} record printed successfully!');
            return $result;

        } catch (\Exception $e) {
            flash()->addError('Failed to print {{modelNameSingularLowerCase}}: ' . $e->getMessage());
        }
    }

    public function printSelected($ids = null, $template = null)
    {
        try {
            $selectedIds = $ids ?: $this->selected;

            if (empty($selectedIds)) {
                flash()->addWarning('Please select records to print.');
                return;
            }

            ${{modelNamePluralLowerCase}} = {{modelName}}::whereIn('id', $selectedIds)->get();
            $print = new {{modelName}}Print();

            $data = [
                'type' => $this->printFormat,
                'orientation' => $this->printOrientation,
                'paper_size' => $this->printPaperSize,
                'template' => $template ?: $this->printTemplate,
                'options' => $this->printOptions,
                'records' => ${{modelNamePluralLowerCase}},
            ];

            $result = $print->generateMultipleRecords($data);

            $this->dispatch('print-selected-generated', ['url' => $result['url']]);

            flash()->addSuccess(count($selectedIds) . ' records printed successfully!');
            return $result;

        } catch (\Exception $e) {
            flash()->addError('Failed to print selected records: ' . $e->getMessage());
        }
    }

    public function printCustom($query = null, $template = null, $options = [])
    {
        try {
            $print = new {{modelName}}Print();

            $customQuery = $query ?: {{modelName}}::query();
            $records = $customQuery->get();

            $data = array_merge([
                'type' => $this->printFormat,
                'orientation' => $this->printOrientation,
                'paper_size' => $this->printPaperSize,
                'template' => $template ?: $this->printTemplate,
                'options' => array_merge($this->printOptions, $options),
                'records' => $records,
            ], $options);

            $result = $print->generateCustomReport($data);

            $this->dispatch('print-custom-generated', ['url' => $result['url']]);

            flash()->addSuccess('Custom report generated successfully!');
            return $result;

        } catch (\Exception $e) {
            flash()->addError('Failed to generate custom report: ' . $e->getMessage());
        }
    }

    public function setPrintTemplate($template)
    {
        $this->printTemplate = $template;
        $this->dispatch('print-template-changed', $template);
    }

    public function setPrintOptions($options)
    {
        $this->printOptions = array_merge($this->printOptions, $options);
        $this->dispatch('print-options-updated', $this->printOptions);
    }

    public function previewPrint($type = 'report', $id = null)
    {
        try {
            $print = new {{modelName}}Print();

            $data = [
                'type' => $this->printFormat,
                'orientation' => $this->printOrientation,
                'paper_size' => $this->printPaperSize,
                'template' => $this->printTemplate,
                'options' => array_merge($this->printOptions, ['preview' => true]),
            ];

            if ($type === 'record' && $id) {
                $data['record'] = {{modelName}}::findOrFail($id);
                $result = $print->generateSingleRecord($data);
            } else {
                $data['data'] = $this->{{modelNamePluralLowerCase}};
                $result = $print->generateReport($data);
            }

            $this->dispatch('print-preview-ready', ['html' => $result['preview']]);

        } catch (\Exception $e) {
            flash()->addError('Failed to generate print preview: ' . $e->getMessage());
        }
    }

    // Email Methods
    public function sendEmail()
    {
        $this->validate([
            'emailRecipient' => 'required|email',
            'emailSubject' => 'required|string|max:255',
        ]);

        try {
            $this->emailSending = true;

            if ($this->emailAll) {
                $this->sendEmailToAll();
            } elseif (!empty($this->emailSelectedItems)) {
                $this->sendEmailToSelected();
            } else {
                $this->sendEmailReport();
            }

            $this->emailResults = [
                'success' => true,
                'message' => 'Email sent successfully!'
            ];

            flash()->addSuccess('Email sent successfully!');
            $this->dispatch('closeModal');

        } catch (\Exception $e) {
            $this->emailResults = [
                'success' => false,
                'message' => 'Failed to send email: ' . $e->getMessage()
            ];
            flash()->addError('Failed to send email: ' . $e->getMessage());
        } finally {
            $this->emailSending = false;
        }
    }

    public function sendEmailRow($id)
    {
        $this->validate([
            'emailRecipient' => 'required|email',
        ]);

        try {
            $this->emailSending = true;
            $record = {{modelName}}::findOrFail($id);

            Mail::to($this->emailRecipient)->send(
                new {{modelName}}Email(
                    $record,
                    null,
                    {{modelName}}Email::TYPE_SINGLE_RECORD,
                    $this->emailSubject ?: "{{modelName}} Details - ID #{$record->id}",
                    $this->emailBody,
                    $this->emailAttachment !== null,
                    $this->emailIncludeStatistics,
                    auth()->user()
                )
            );

            flash()->addSuccess("Email sent for {{modelNameLowerCase}} #{$id}");
            $this->dispatch('closeModal');
            $this->resetEmailForm();

        } catch (\Exception $e) {
            flash()->addError('Failed to send email: ' . $e->getMessage());
        } finally {
            $this->emailSending = false;
        }
    }

    public function sendEmailToAll()
    {
        $query = $this->getFilteredQuery();
        ${{modelNamePluralLowerCase}} = $query->get();

        Mail::to($this->emailRecipient)->send(
            new {{modelName}}Email(
                null,
                ${{modelNamePluralLowerCase}},
                {{modelName}}Email::TYPE_MULTIPLE_RECORDS,
                $this->emailSubject ?: "{{modelPluralTitle}} Report - All Records",
                $this->emailBody,
                $this->emailAttachment !== null,
                $this->emailIncludeStatistics,
                auth()->user(),
                [
                    'filters_applied' => $this->getAppliedFilters(),
                    'total_count' => ${{modelNamePluralLowerCase}}->count()
                ]
            )
        );
    }

    public function sendEmailToSelected()
    {
        ${{modelNamePluralLowerCase}} = {{modelName}}::whereIn('id', $this->emailSelectedItems)->get();

        Mail::to($this->emailRecipient)->send(
            new {{modelName}}Email(
                null,
                ${{modelNamePluralLowerCase}},
                {{modelName}}Email::TYPE_MULTIPLE_RECORDS,
                $this->emailSubject ?: "{{modelPluralTitle}} Report - Selected Records",
                $this->emailBody,
                $this->emailAttachment !== null,
                $this->emailIncludeStatistics,
                auth()->user(),
                [
                    'selection_type' => 'selected',
                    'total_count' => ${{modelNamePluralLowerCase}}->count()
                ]
            )
        );
    }

    public function sendEmailReport()
    {
        $query = $this->getFilteredQuery();
        ${{modelNamePluralLowerCase}} = $query->get();

        Mail::to($this->emailRecipient)->send(
            new {{modelName}}Email(
                null,
                ${{modelNamePluralLowerCase}},
                {{modelName}}Email::TYPE_REPORT,
                $this->emailSubject ?: "{{modelPluralTitle}} Report - " . now()->format('M d, Y'),
                $this->emailBody,
                $this->emailAttachment !== null,
                true, // Always include statistics for reports
                auth()->user(),
                [
                    'filters_applied' => $this->getAppliedFilters(),
                    'report_type' => 'general',
                    'generated_by' => auth()->user()->name ?? 'System'
                ]
            )
        );
    }

    public function prepareEmailModal($recordId = null)
    {
        $this->resetEmailForm();
        $this->emailRecordId = $recordId;

        if ($recordId) {
            $record = {{modelName}}::findOrFail($recordId);
            $this->emailSubject = "{{modelName}} Details - ID #{$record->id}";
            $this->emailBody = "Please find the details for {{modelNameLowerCase}} #{$record->id} attached.";
        } else {
            $this->emailSubject = "{{modelPluralTitle}} Report - " . now()->format('M d, Y');
            $this->emailBody = "Please find the {{modelNamePluralLowerCase}} report attached.";
        }
    }

    public function resetEmailForm()
    {
        $this->emailSubject = '';
        $this->emailBody = '';
        $this->emailRecipient = '';
        $this->emailAttachment = null;
        $this->emailResults = [];
        $this->emailSending = false;
        $this->emailRecordId = null;
        $this->emailAll = false;
        $this->emailSelectedItems = [];
        $this->emailIncludeStatistics = false;
    }

    protected function getAppliedFilters(): array
    {
        $filters = [];

        if ($this->search || $this->indexSearch) {
            $filters['search'] = $this->search ?: $this->indexSearch;
        }

        if ($this->filterStatus) {
            $filters['status'] = $this->filterStatus;
        }

        if ($this->filterDateRange) {
            $filters['date_range'] = $this->filterDateRange;
        }

        return $filters;
    }

    public function sendNotificationEmail($recordId, $action, $additionalData = [])
    {
        try {
            $record = {{modelName}}::findOrFail($recordId);

            // Get notification recipients (you may want to customize this)
            $recipients = $this->getNotificationRecipients($action);

            foreach ($recipients as $recipient) {
                Mail::to($recipient)->send(
                    new {{modelName}}Email(
                        $record,
                        null,
                        {{modelName}}Email::TYPE_NOTIFICATION,
                        "{{modelName}} {$action} - ID #{$record->id}",
                        "A {{modelNameLowerCase}} has been {$action}.",
                        false,
                        false,
                        auth()->user(),
                        array_merge($additionalData, [
                            'action' => $action,
                            'performed_by' => auth()->user()->name ?? 'System'
                        ])
                    )
                );
            }

        } catch (\Exception $e) {
            \Log::error("Failed to send notification email for {{modelNameLowerCase}} {$recordId}: " . $e->getMessage());
        }
    }

    // Enhanced Notification Methods
    public function sendNotification($type, $recipients = null, $data = [])
    {
        try {
            $recipients = $recipients ?: $this->notificationRecipients;

            if (empty($recipients)) {
                flash()->addWarning('No recipients selected for notification.');
                return;
            }

            $notification = new {{modelName}}Notification(
                null, // record can be null for general notifications
                $type,
                auth()->user(),
                $data
            );

            foreach ($recipients as $recipient) {
                if (is_string($recipient)) {
                    // Email address
                    Notification::route('mail', $recipient)->notify($notification);
                } else {
                    // User model
                    $recipient->notify($notification);
                }
            }

            flash()->addSuccess('Notification sent successfully to ' . count($recipients) . ' recipients!');

        } catch (\Exception $e) {
            flash()->addError('Failed to send notification: ' . $e->getMessage());
        }
    }

    public function sendBulkNotification($recordIds, $type, $additionalData = [])
    {
        try {
            $records = {{modelName}}::whereIn('id', $recordIds)->get();
            $recipients = $this->notificationRecipients;

            if (empty($recipients)) {
                flash()->addWarning('No recipients configured for notifications.');
                return;
            }

            foreach ($records as $record) {
                $notification = new {{modelName}}Notification(
                    $record,
                    $type,
                    auth()->user(),
                    array_merge($additionalData, [
                        'bulk_operation' => true,
                        'total_records' => count($records)
                    ])
                );

                foreach ($recipients as $recipient) {
                    if (is_string($recipient)) {
                        Notification::route('mail', $recipient)->notify($notification);
                    } else {
                        $recipient->notify($notification);
                    }
                }
            }

            flash()->addSuccess('Bulk notifications sent successfully!');

        } catch (\Exception $e) {
            flash()->addError('Failed to send bulk notifications: ' . $e->getMessage());
        }
    }

    public function sendScheduledNotification($type, $scheduleTime, $recipients = null, $data = [])
    {
        try {
            $recipients = $recipients ?: $this->notificationRecipients;

            $notification = new {{modelName}}Notification(
                null,
                $type,
                auth()->user(),
                array_merge($data, [
                    'scheduled' => true,
                    'schedule_time' => $scheduleTime
                ])
            );

            // Queue notification for later
            foreach ($recipients as $recipient) {
                if (is_string($recipient)) {
                    Notification::route('mail', $recipient)
                        ->notify($notification->delay($scheduleTime));
                } else {
                    $recipient->notify($notification->delay($scheduleTime));
                }
            }

            flash()->addSuccess('Notification scheduled successfully for ' . $scheduleTime->format('Y-m-d H:i'));

        } catch (\Exception $e) {
            flash()->addError('Failed to schedule notification: ' . $e->getMessage());
        }
    }

    public function sendTemplateNotification($templateType, $recipients = null, $data = [])
    {
        try {
            $this->notificationTemplate = $templateType;
            $recipients = $recipients ?: $this->notificationRecipients;

            $notification = new {{modelName}}Notification(
                null,
                {{modelName}}Notification::TYPE_TEMPLATE,
                auth()->user(),
                array_merge($data, [
                    'template_type' => $templateType,
                    'custom_template' => true
                ])
            );

            foreach ($recipients as $recipient) {
                if (is_string($recipient)) {
                    Notification::route('mail', $recipient)->notify($notification);
                } else {
                    $recipient->notify($notification);
                }
            }

            flash()->addSuccess('Template notification sent successfully!');

        } catch (\Exception $e) {
            flash()->addError('Failed to send template notification: ' . $e->getMessage());
        }
    }

    public function getNotificationHistory($limit = 50)
    {
        try {
            return DB::table('notifications')
                ->where('type', {{modelName}}Notification::class)
                ->orderBy('created_at', 'desc')
                ->limit($limit)
                ->get();

        } catch (\Exception $e) {
            flash()->addError('Failed to load notification history: ' . $e->getMessage());
            return collect();
        }
    }

    public function markNotificationAsRead($notificationId)
    {
        try {
            DB::table('notifications')
                ->where('id', $notificationId)
                ->update(['read_at' => now()]);

            flash()->addSuccess('Notification marked as read.');

        } catch (\Exception $e) {
            flash()->addError('Failed to mark notification as read: ' . $e->getMessage());
        }
    }

    public function setNotificationChannels($channels)
    {
        $this->notificationChannels = $channels;
        $this->dispatch('notification-channels-updated', $channels);
    }

    public function addNotificationRecipient($recipient)
    {
        if (!in_array($recipient, $this->notificationRecipients)) {
            $this->notificationRecipients[] = $recipient;
            $this->dispatch('notification-recipient-added', $recipient);
        }
    }

    public function removeNotificationRecipient($recipient)
    {
        $this->notificationRecipients = array_filter(
            $this->notificationRecipients,
            fn($r) => $r !== $recipient
        );
        $this->dispatch('notification-recipient-removed', $recipient);
    }

    public function testNotification($type = {{modelName}}Notification::TYPE_TEST)
    {
        try {
            $notification = new {{modelName}}Notification(
                null,
                $type,
                auth()->user(),
                [
                    'test_notification' => true,
                    'sent_at' => now()->format('Y-m-d H:i:s')
                ]
            );

            auth()->user()->notify($notification);

            flash()->addSuccess('Test notification sent successfully!');

        } catch (\Exception $e) {
            flash()->addError('Failed to send test notification: ' . $e->getMessage());
        }
    }

    protected function getNotificationRecipients($action): array
    {
        // Customize this method to return appropriate recipients based on action
        // For example, get admin users, managers, or specific role-based recipients

        return [
            // You can customize this based on your needs
            // auth()->user()->email, // Current user
            // 'admin@example.com', // Admin email
        ];
    }

    // Bulk Operations
    public function bulkDelete()
    {
        if (count($this->selectedItems) > 0) {
            $affectedCount = count($this->selectedItems);

            // Get records before deletion for notifications
            $records = {{modelName}}::whereIn('id', $this->selectedItems)->get();

            // Send notifications for each record
            foreach ($records as $record) {
                $record->notify(new {{modelName}}Notification(
                    $record,
                    {{modelName}}Notification::TYPE_BULK_ACTION,
                    auth()->user(),
                    ['bulk_action' => 'deleted', 'affected_count' => $affectedCount]
                ));
            }

            {{modelName}}::whereIn('id', $this->selectedItems)->delete();
            $this->selectedItems = [];

            flash()->addSuccess('Selected {{modelNamePluralLowerCase}} deleted successfully!');
            return $this->redirect('/{{getModuleInput}}/{{getNameInput}}', navigate: true);
        }
    }

    public function bulkActivate()
    {
        if (count($this->selectedItems) > 0) {
            $affectedCount = count($this->selectedItems);

            // Get records for notifications
            $records = {{modelName}}::whereIn('id', $this->selectedItems)->get();

            {{modelName}}::whereIn('id', $this->selectedItems)->update(['status' => 'active']);

            // Send notifications
            foreach ($records as $record) {
                $record->notify(new {{modelName}}Notification(
                    $record,
                    {{modelName}}Notification::TYPE_BULK_ACTION,
                    auth()->user(),
                    ['bulk_action' => 'activated', 'affected_count' => $affectedCount]
                ));
            }

            $this->selectedItems = [];
            flash()->addSuccess('Selected {{modelNamePluralLowerCase}} activated successfully!');
            return $this->redirect('/{{getModuleInput}}/{{getNameInput}}', navigate: true);
        }
    }

    public function bulkDeactivate()
    {
        if (count($this->selectedItems) > 0) {
            $affectedCount = count($this->selectedItems);

            // Get records for notifications
            $records = {{modelName}}::whereIn('id', $this->selectedItems)->get();

            {{modelName}}::whereIn('id', $this->selectedItems)->update(['status' => 'inactive']);

            // Send notifications
            foreach ($records as $record) {
                $record->notify(new {{modelName}}Notification(
                    $record,
                    {{modelName}}Notification::TYPE_BULK_ACTION,
                    auth()->user(),
                    ['bulk_action' => 'deactivated', 'affected_count' => $affectedCount]
                ));
            }

            $this->selectedItems = [];
            flash()->addSuccess('Selected {{modelNamePluralLowerCase}} deactivated successfully!');
            return $this->redirect('/{{getModuleInput}}/{{getNameInput}}', navigate: true);
        }
    }

    protected function getFilteredQuery()
    {
        $query = {{modelName}}::query();

        if ($this->search || $this->indexSearch) {
            $query->search($this->search ?: $this->indexSearch);
        }

        if ($this->filterStatus) {
            $query->where('status', $this->filterStatus);
        }

        if ($this->filterDateRange) {
            $query->whereBetween('created_at', $this->getDateRange($this->filterDateRange));
        }

        return $query->orderBy($this->sortField, $this->sortDirection);
    }

    public function deleteselected()
    {
        $ids = $this->selecteditem;
        {{modelName}}::wherekey($ids)->delete();
        $this->selecteditem = [];
        $this->dispatch('closeModal');
        flash()->addSuccess('{{modelName}} Successfully Deleted.');
    }

    public function deactivate($id)
    {
        if ($id) {
            $record = {{modelName}}::find($id);
            if ($record) {
                $record->update(['status' => 'inactive']);

                // Send notification
                $record->notify(new {{modelName}}Notification(
                    $record,
                    {{modelName}}Notification::TYPE_STATUS_CHANGED,
                    auth()->user(),
                    ['new_status' => 'inactive', 'old_status' => 'active']
                ));

                // Send email notification if configured
                $this->sendNotificationEmail($record->id, 'deactivated', [
                    'new_status' => 'inactive'
                ]);
            }

            $this->dispatch('closeModal');
            flash()->addSuccess('{{modelName}} Successfully Deactivated.');
        }
    }

    public function activate($id)
    {
        if ($id) {
            $record = {{modelName}}::find($id);
            if ($record) {
                $record->update(['status' => 'active']);

                // Send notification
                $record->notify(new {{modelName}}Notification(
                    $record,
                    {{modelName}}Notification::TYPE_STATUS_CHANGED,
                    auth()->user(),
                    ['new_status' => 'active', 'old_status' => 'inactive']
                ));

                // Send email notification if configured
                $this->sendNotificationEmail($record->id, 'activated', [
                    'new_status' => 'active'
                ]);
            }

            $this->dispatch('closeModal');
            flash()->addSuccess('{{modelName}} Successfully Activated.');
        }
    }


    public function add_{{modelNamePluralLowerCase}}()
    {
        return $this->redirectRoute('backend.add_{{modelNamePluralLowerCase}}');
    }

    public function edit_{{modelNamePluralLowerCase}}($id)
    {
        $record = {{modelName}}::findOrFail($id);
        return $this->redirectRoute('backend.edit_{{modelNamePluralLowerCase}}',[
            'pat_id'  => $record->id,
        ]);
    }

}
