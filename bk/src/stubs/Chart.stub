<?php

namespace Modules\{{getModuleInputModule}}\Charts;

use Modules\{{getModuleInputModule}}\Models\{{modelName}};
use Carbon\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;

class {{modelName}}Chart
{
    protected $model;
    protected $dateFormat;
    protected $colors;

    public function __construct()
    {
        $this->model = new {{modelName}};
        $this->dateFormat = 'Y-m-d';
        $this->colors = [
            'primary' => '#007bff',
            'success' => '#28a745',
            'danger' => '#dc3545',
            'warning' => '#ffc107',
            'info' => '#17a2b8',
            'secondary' => '#6c757d',
            'dark' => '#343a40',
            'light' => '#f8f9fa'
        ];
    }

    /**
     * Get chart data for records created over time (ApexCharts format)
     */
    public function getCreatedOverTimeData(string $period = 'month', int $limit = 12): array
    {
        $query = $this->model::query();
        
        switch ($period) {
            case 'day':
                $format = '%Y-%m-%d';
                $startDate = Carbon::now()->subDays($limit);
                break;
            case 'week':
                $format = '%Y-%u';
                $startDate = Carbon::now()->subWeeks($limit);
                break;
            case 'month':
                $format = '%Y-%m';
                $startDate = Carbon::now()->subMonths($limit);
                break;
            case 'year':
                $format = '%Y';
                $startDate = Carbon::now()->subYears($limit);
                break;
            default:
                $format = '%Y-%m';
                $startDate = Carbon::now()->subMonths($limit);
        }

        $data = $query->where('created_at', '>=', $startDate)
            ->selectRaw("DATE_FORMAT(created_at, '{$format}') as period, COUNT(*) as count")
            ->groupBy('period')
            ->orderBy('period')
            ->get();

        // ApexCharts format
        return [
            'series' => [
                [
                    'name' => '{{modelPluralTitle}} Created',
                    'data' => $data->map(function ($item) use ($format) {
                        return [
                            'x' => $this->formatPeriodLabel($item->period, $format),
                            'y' => $item->count
                        ];
                    })->values()->toArray()
                ]
            ],
            'categories' => $data->pluck('period')->map(function ($period) use ($format) {
                return $this->formatPeriodLabel($period, $format);
            })->toArray()
        ];
    }

    /**
     * Get status distribution chart data (ApexCharts format)
     */
    public function getStatusDistributionData(): array
    {
        $data = $this->model::selectRaw('status, COUNT(*) as count')
            ->groupBy('status')
            ->get();

        $colors = [
            'active' => $this->colors['success'],
            'inactive' => $this->colors['danger'],
            'pending' => $this->colors['warning'],
            'draft' => $this->colors['secondary'],
        ];

        return [
            'series' => $data->pluck('count')->toArray(),
            'labels' => $data->pluck('status')->map(function ($status) {
                return ucfirst($status);
            })->toArray(),
            'colors' => $data->pluck('status')->map(function ($status) use ($colors) {
                return $colors[$status] ?? $this->colors['secondary'];
            })->toArray()
        ];
    }

    /**
     * Get monthly comparison data (ApexCharts format)
     */
    public function getMonthlyComparisonData(int $months = 6): array
    {
        $currentYear = Carbon::now()->year;
        $previousYear = $currentYear - 1;

        $currentData = $this->getMonthlyData($currentYear, $months);
        $previousData = $this->getMonthlyData($previousYear, $months);

        return [
            'series' => [
                [
                    'name' => (string) $currentYear,
                    'data' => $currentData->pluck('count')->toArray()
                ],
                [
                    'name' => (string) $previousYear,
                    'data' => $previousData->pluck('count')->toArray()
                ]
            ],
            'categories' => $currentData->pluck('month_name')->toArray(),
            'colors' => [$this->colors['primary'], $this->colors['secondary']]
        ];
    }

    /**
     * Get top performers data (ApexCharts format)
     */
    public function getTopPerformersData(string $field = 'created_at', int $limit = 10): array
    {
        $fillableFields = $this->model->getFillable();
        
        if (in_array($field, $fillableFields)) {
            $data = $this->model::selectRaw("{$field}, COUNT(*) as count")
                ->whereNotNull($field)
                ->groupBy($field)
                ->orderBy('count', 'desc')
                ->limit($limit)
                ->get();

            return [
                'series' => [
                    [
                        'name' => "Count",
                        'data' => $data->map(function ($item) use ($field) {
                            return [
                                'x' => $item->{$field},
                                'y' => $item->count
                            ];
                        })->toArray()
                    ]
                ],
                'categories' => $data->pluck($field)->toArray(),
                'colors' => $this->generateColorGradient($data->count())
            ];
        }

        return ['series' => [], 'categories' => [], 'colors' => []];
    }

    /**
     * Get activity heatmap data
     */
    public function getActivityHeatmapData(int $days = 365): array
    {
        $startDate = Carbon::now()->subDays($days);
        
        $data = $this->model::where('created_at', '>=', $startDate)
            ->selectRaw('DATE(created_at) as date, COUNT(*) as count')
            ->groupBy('date')
            ->orderBy('date')
            ->get()
            ->keyBy('date');

        $heatmapData = [];
        $currentDate = $startDate->copy();

        while ($currentDate->lte(Carbon::now())) {
            $dateStr = $currentDate->format('Y-m-d');
            $heatmapData[] = [
                'date' => $dateStr,
                'count' => $data->get($dateStr)->count ?? 0,
                'day' => $currentDate->dayOfWeek,
                'week' => $currentDate->weekOfYear,
            ];
            $currentDate->addDay();
        }

        return $heatmapData;
    }

    /**
     * Get real-time statistics
     */
    public function getRealTimeStats(): array
    {
        $total = $this->model::count();
        $today = $this->model::whereDate('created_at', Carbon::today())->count();
        $thisWeek = $this->model::whereBetween('created_at', [
            Carbon::now()->startOfWeek(),
            Carbon::now()->endOfWeek()
        ])->count();
        $thisMonth = $this->model::whereBetween('created_at', [
            Carbon::now()->startOfMonth(),
            Carbon::now()->endOfMonth()
        ])->count();

        // Calculate growth percentages
        $previousMonth = $this->model::whereBetween('created_at', [
            Carbon::now()->subMonth()->startOfMonth(),
            Carbon::now()->subMonth()->endOfMonth()
        ])->count();

        $growthRate = $previousMonth > 0 ? 
            round((($thisMonth - $previousMonth) / $previousMonth) * 100, 2) : 0;

        return [
            'total' => $total,
            'today' => $today,
            'this_week' => $thisWeek,
            'this_month' => $thisMonth,
            'growth_rate' => $growthRate,
            'trend' => $growthRate > 0 ? 'up' : ($growthRate < 0 ? 'down' : 'stable'),
            'active_count' => $this->model::where('status', 'active')->count(),
            'inactive_count' => $this->model::where('status', 'inactive')->count(),
        ];
    }

    /**
     * Get custom chart data based on aggregation (ApexCharts format)
     */
    public function getCustomAggregationData(
        string $groupBy,
        string $aggregateFunction = 'count',
        string $aggregateField = '*',
        array $filters = []
    ): array {
        $query = $this->model::query();

        // Apply filters
        foreach ($filters as $field => $value) {
            if (is_array($value)) {
                $query->whereIn($field, $value);
            } else {
                $query->where($field, $value);
            }
        }

        // Build aggregation
        switch (strtolower($aggregateFunction)) {
            case 'sum':
                $selectRaw = "{$groupBy}, SUM({$aggregateField}) as value";
                break;
            case 'avg':
                $selectRaw = "{$groupBy}, AVG({$aggregateField}) as value";
                break;
            case 'max':
                $selectRaw = "{$groupBy}, MAX({$aggregateField}) as value";
                break;
            case 'min':
                $selectRaw = "{$groupBy}, MIN({$aggregateField}) as value";
                break;
            default:
                $selectRaw = "{$groupBy}, COUNT(*) as value";
        }

        $data = $query->selectRaw($selectRaw)
            ->groupBy($groupBy)
            ->orderBy('value', 'desc')
            ->get();

        return [
            'series' => [
                [
                    'name' => ucfirst($aggregateFunction) . ' by ' . ucwords(str_replace('_', ' ', $groupBy)),
                    'data' => $data->map(function ($item) use ($groupBy) {
                        return [
                            'x' => is_string($item->{$groupBy}) ? ucfirst($item->{$groupBy}) : $item->{$groupBy},
                            'y' => $item->value
                        ];
                    })->toArray()
                ]
            ],
            'categories' => $data->pluck($groupBy)->map(function ($item) {
                return is_string($item) ? ucfirst($item) : $item;
            })->toArray(),
            'colors' => $this->generateColorGradient($data->count())
        ];
    }

    /**
     * Get trend analysis data (ApexCharts format)
     */
    public function getTrendAnalysisData(int $periods = 12): array
    {
        $data = [];
        $currentDate = Carbon::now();

        for ($i = $periods - 1; $i >= 0; $i--) {
            $startDate = $currentDate->copy()->subMonths($i)->startOfMonth();
            $endDate = $currentDate->copy()->subMonths($i)->endOfMonth();

            $count = $this->model::whereBetween('created_at', [$startDate, $endDate])->count();
            
            $data[] = [
                'period' => $startDate->format('M Y'),
                'count' => $count,
                'timestamp' => $startDate->timestamp,
            ];
        }

        // Calculate trend direction
        $recent = array_slice($data, -3); // Last 3 periods
        $trend = $this->calculateTrend($recent);

        return [
            'data' => $data,
            'trend' => $trend,
            'chart_data' => [
                'series' => [
                    [
                        'name' => '{{modelPluralTitle}} Trend',
                        'data' => array_map(function ($item) {
                            return [
                                'x' => $item['period'],
                                'y' => $item['count']
                            ];
                        }, $data)
                    ]
                ],
                'categories' => array_column($data, 'period'),
                'colors' => [$this->colors['info']]
            ]
        ];
    }

    /**
     * Helper: Get monthly data for a specific year
     */
    protected function getMonthlyData(int $year, int $months): Collection
    {
        return $this->model::whereYear('created_at', $year)
            ->selectRaw('MONTH(created_at) as month, MONTHNAME(created_at) as month_name, COUNT(*) as count')
            ->groupBy('month', 'month_name')
            ->orderBy('month')
            ->limit($months)
            ->get();
    }

    /**
     * Helper: Format period labels
     */
    protected function formatPeriodLabel(string $period, string $format): string
    {
        switch ($format) {
            case '%Y-%m-%d':
                return Carbon::createFromFormat('Y-m-d', $period)->format('M j');
            case '%Y-%u':
                return 'Week ' . substr($period, -2);
            case '%Y-%m':
                return Carbon::createFromFormat('Y-m', $period)->format('M Y');
            case '%Y':
                return $period;
            default:
                return $period;
        }
    }

    /**
     * Helper: Generate color gradient
     */
    protected function generateColorGradient(int $count): array
    {
        $colors = [];
        $baseColors = array_values($this->colors);
        
        for ($i = 0; $i < $count; $i++) {
            $colors[] = $baseColors[$i % count($baseColors)];
        }
        
        return $colors;
    }

    /**
     * Helper: Calculate trend direction
     */
    protected function calculateTrend(array $data): string
    {
        if (count($data) < 2) {
            return 'stable';
        }

        $values = array_column($data, 'count');
        $sum = 0;
        
        for ($i = 1; $i < count($values); $i++) {
            $sum += $values[$i] - $values[$i - 1];
        }

        if ($sum > 0) {
            return 'increasing';
        } elseif ($sum < 0) {
            return 'decreasing';
        } else {
            return 'stable';
        }
    }

    /**
     * Get all chart types available for ApexCharts
     */
    public function getAvailableChartTypes(): array
    {
        return [
            'line' => 'Line Chart',
            'area' => 'Area Chart',
            'bar' => 'Bar Chart',
            'column' => 'Column Chart',
            'pie' => 'Pie Chart',
            'donut' => 'Donut Chart',
            'radialBar' => 'Radial Bar Chart',
            'scatter' => 'Scatter Chart',
            'bubble' => 'Bubble Chart',
            'heatmap' => 'Heatmap',
            'candlestick' => 'Candlestick Chart',
            'boxPlot' => 'Box Plot',
            'radar' => 'Radar Chart',
            'polarArea' => 'Polar Area Chart',
            'rangeBar' => 'Range Bar Chart',
            'timeline' => 'Timeline Chart',
            'treemap' => 'Treemap',
        ];
    }

    /**
     * Get ApexCharts configuration options
     */
    public function getApexChartOptions(string $chartType = 'line'): array
    {
        $baseOptions = [
            'chart' => [
                'type' => $chartType,
                'height' => 350,
                'toolbar' => [
                    'show' => true,
                    'offsetX' => 0,
                    'offsetY' => 0,
                    'tools' => [
                        'download' => true,
                        'selection' => true,
                        'zoom' => true,
                        'zoomin' => true,
                        'zoomout' => true,
                        'pan' => true,
                        'reset' => true
                    ]
                ],
                'animations' => [
                    'enabled' => true,
                    'easing' => 'easeinout',
                    'speed' => 800
                ]
            ],
            'colors' => array_values($this->colors),
            'dataLabels' => [
                'enabled' => false
            ],
            'stroke' => [
                'curve' => 'smooth',
                'width' => 2
            ],
            'grid' => [
                'show' => true,
                'borderColor' => '#e0e6ed',
                'strokeDashArray' => 5,
                'xaxis' => [
                    'lines' => [
                        'show' => false
                    ]
                ],
                'yaxis' => [
                    'lines' => [
                        'show' => true
                    ]
                ]
            ],
            'xaxis' => [
                'categories' => [],
                'labels' => [
                    'style' => [
                        'colors' => '#8e8da4'
                    ]
                ]
            ],
            'yaxis' => [
                'labels' => [
                    'style' => [
                        'colors' => '#8e8da4'
                    ]
                ]
            ],
            'tooltip' => [
                'theme' => 'dark',
                'x' => [
                    'show' => true
                ]
            ],
            'legend' => [
                'show' => true,
                'position' => 'bottom',
                'horizontalAlign' => 'center'
            ],
            'responsive' => [
                [
                    'breakpoint' => 768,
                    'options' => [
                        'chart' => [
                            'height' => 300
                        ],
                        'legend' => [
                            'position' => 'bottom'
                        ]
                    ]
                ]
            ]
        ];

        // Chart-specific options
        switch ($chartType) {
            case 'pie':
            case 'donut':
                $baseOptions['plotOptions'] = [
                    'pie' => [
                        'donut' => [
                            'size' => $chartType === 'donut' ? '60%' : '0%'
                        ]
                    ]
                ];
                $baseOptions['dataLabels'] = [
                    'enabled' => true,
                    'formatter' => 'function (val) { return val.toFixed(1) + "%" }'
                ];
                break;
            
            case 'bar':
            case 'column':
                $baseOptions['plotOptions'] = [
                    'bar' => [
                        'horizontal' => $chartType === 'bar',
                        'columnWidth' => '55%',
                        'distributed' => false
                    ]
                ];
                break;
            
            case 'radialBar':
                $baseOptions['plotOptions'] = [
                    'radialBar' => [
                        'hollow' => [
                            'size' => '70%'
                        ]
                    ]
                ];
                break;
            
            case 'heatmap':
                $baseOptions['plotOptions'] = [
                    'heatmap' => [
                        'shadeIntensity' => 0.5,
                        'colorScale' => [
                            'ranges' => [
                                [
                                    'from' => 0,
                                    'to' => 5,
                                    'name' => 'Low',
                                    'color' => '#00A100'
                                ],
                                [
                                    'from' => 6,
                                    'to' => 15,
                                    'name' => 'Medium',
                                    'color' => '#128FD9'
                                ],
                                [
                                    'from' => 16,
                                    'to' => 50,
                                    'name' => 'High',
                                    'color' => '#FFB200'
                                ]
                            ]
                        ]
                    ]
                ];
                break;
        }

        return $baseOptions;
    }

    /**
     * Get heatmap data for ApexCharts
     */
    public function getHeatmapData(int $days = 365): array
    {
        $startDate = Carbon::now()->subDays($days);
        
        $data = $this->model::where('created_at', '>=', $startDate)
            ->selectRaw('DATE(created_at) as date, COUNT(*) as count')
            ->groupBy('date')
            ->orderBy('date')
            ->get()
            ->keyBy('date');

        $series = [];
        $currentDate = $startDate->copy();

        // Group by weeks for better visualization
        $weekData = [];
        while ($currentDate->lte(Carbon::now())) {
            $weekNumber = $currentDate->weekOfYear;
            $dayName = $currentDate->format('D');
            $dateStr = $currentDate->format('Y-m-d');
            $count = $data->get($dateStr)->count ?? 0;

            if (!isset($weekData["Week {$weekNumber}"])) {
                $weekData["Week {$weekNumber}"] = [];
            }

            $weekData["Week {$weekNumber}"][] = [
                'x' => $dayName,
                'y' => $count
            ];

            $currentDate->addDay();
        }

        foreach ($weekData as $week => $weekValues) {
            $series[] = [
                'name' => $week,
                'data' => $weekValues
            ];
        }

        return [
            'series' => array_slice($series, -52), // Last 52 weeks
            'options' => $this->getApexChartOptions('heatmap')
        ];
    }

    /**
     * Get real-time gauge chart data
     */
    public function getGaugeChartData(): array
    {
        $total = $this->model::count();
        $active = $this->model::where('status', 'active')->count();
        $percentage = $total > 0 ? round(($active / $total) * 100, 1) : 0;

        return [
            'series' => [$percentage],
            'options' => array_merge($this->getApexChartOptions('radialBar'), [
                'labels' => ['Active {{modelPluralTitle}}'],
                'plotOptions' => [
                    'radialBar' => [
                        'hollow' => [
                            'size' => '70%'
                        ],
                        'dataLabels' => [
                            'name' => [
                                'fontSize' => '16px'
                            ],
                            'value' => [
                                'fontSize' => '14px',
                                'formatter' => 'function (val) { return val + "%" }'
                            ]
                        ]
                    ]
                ]
            ])
        ];
    }

    /**
     * Get sparkline data for mini charts
     */
    public function getSparklineData(int $days = 30): array
    {
        $data = $this->model::selectRaw('DATE(created_at) as date, COUNT(*) as count')
            ->where('created_at', '>=', Carbon::now()->subDays($days))
            ->groupBy('date')
            ->orderBy('date')
            ->get();

        return [
            'series' => [
                [
                    'name' => 'Daily Count',
                    'data' => $data->pluck('count')->toArray()
                ]
            ],
            'options' => [
                'chart' => [
                    'type' => 'line',
                    'width' => 160,
                    'height' => 35,
                    'sparkline' => [
                        'enabled' => true
                    ]
                ],
                'stroke' => [
                    'width' => 2,
                    'curve' => 'smooth'
                ],
                'colors' => [$this->colors['primary']],
                'tooltip' => [
                    'enabled' => false
                ]
            ]
        ];
    }

    /**
     * Export chart data to different formats
     */
    public function exportChartData(array $chartData, string $format = 'json'): string
    {
        switch (strtolower($format)) {
            case 'csv':
                return $this->exportToCsv($chartData);
            case 'excel':
                return $this->exportToExcel($chartData);
            case 'json':
            default:
                return json_encode($chartData, JSON_PRETTY_PRINT);
        }
    }

    /**
     * Helper: Export to CSV
     */
    protected function exportToCsv(array $chartData): string
    {
        $csv = "Label,Value\n";
        
        if (isset($chartData['labels']) && isset($chartData['datasets'][0]['data'])) {
            $labels = $chartData['labels'];
            $data = $chartData['datasets'][0]['data'];
            
            for ($i = 0; $i < count($labels); $i++) {
                $csv .= "\"{$labels[$i]}\",{$data[$i]}\n";
            }
        }
        
        return $csv;
    }

    /**
     * Helper: Export to Excel (basic implementation)
     */
    protected function exportToExcel(array $chartData): string
    {
        // This would require a proper Excel library implementation
        // For now, return CSV format as fallback
        return $this->exportToCsv($chartData);
    }
}