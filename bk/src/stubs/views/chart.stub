@section('page_title', __('{{modelPluralTitle}} Analytics'))

<div class="px-xl-5 px-lg-4 px-3 py-3 page-body">
    <div class="row g-3">
        <!-- Header Section -->
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between flex-wrap mb-4">
                <div>
                    <h3 class="fw-bold mb-1">{{modelPluralTitle}} Analytics</h3>
                    <p class="text-muted mb-0">Comprehensive data visualization and insights</p>
                </div>
                <div class="d-flex gap-2">
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            <i class="bi bi-calendar"></i> Time Period
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="updateChartPeriod('day')">Last 30 Days</a></li>
                            <li><a class="dropdown-item" href="#" onclick="updateChartPeriod('week')">Last 12 Weeks</a></li>
                            <li><a class="dropdown-item" href="#" onclick="updateChartPeriod('month')">Last 12 Months</a></li>
                            <li><a class="dropdown-item" href="#" onclick="updateChartPeriod('year')">Last 5 Years</a></li>
                        </ul>
                    </div>
                    <button class="btn btn-outline-secondary" onclick="refreshCharts()">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <button class="btn btn-outline-secondary" onclick="exportChartData()">
                        <i class="bi bi-download"></i> Export
                    </button>
                </div>
            </div>
        </div>

        <!-- Real-time Statistics Cards -->
        <div class="col-12">
            <div class="row g-3 mb-4">
                <div class="col-md-3">
                    <div class="card stat-card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="stat-icon bg-primary">
                                    <i class="bi bi-collection text-white"></i>
                                </div>
                                <div class="ms-3">
                                    <p class="stat-label mb-1">Total {{modelPluralTitle}}</p>
                                    <h4 class="stat-value mb-0" id="totalCount">0</h4>
                                    <small class="text-muted">All time</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="stat-icon bg-success">
                                    <i class="bi bi-plus-circle text-white"></i>
                                </div>
                                <div class="ms-3">
                                    <p class="stat-label mb-1">This Month</p>
                                    <h4 class="stat-value mb-0" id="monthCount">0</h4>
                                    <small class="text-muted">
                                        <span id="growthRate">0%</span>
                                        <span id="growthTrend">
                                            <i class="bi bi-arrow-up text-success"></i>
                                        </span>
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="stat-icon bg-info">
                                    <i class="bi bi-check-circle text-white"></i>
                                </div>
                                <div class="ms-3">
                                    <p class="stat-label mb-1">Active</p>
                                    <h4 class="stat-value mb-0" id="activeCount">0</h4>
                                    <small class="text-muted">Currently active</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card border-0 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex align-items-center">
                                <div class="stat-icon bg-warning">
                                    <i class="bi bi-clock text-white"></i>
                                </div>
                                <div class="ms-3">
                                    <p class="stat-label mb-1">Today</p>
                                    <h4 class="stat-value mb-0" id="todayCount">0</h4>
                                    <small class="text-muted">Last 24 hours</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Charts Row -->
        <div class="col-lg-8">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white border-0 d-flex align-items-center justify-content-between">
                    <h5 class="card-title mb-0">{{modelPluralTitle}} Over Time</h5>
                    <div class="btn-group btn-group-sm" role="group">
                        <input type="radio" class="btn-check" name="chartType" id="lineChart" value="line" checked>
                        <label class="btn btn-outline-secondary" for="lineChart">
                            <i class="bi bi-graph-up"></i> Line
                        </label>
                        <input type="radio" class="btn-check" name="chartType" id="barChart" value="bar">
                        <label class="btn btn-outline-secondary" for="barChart">
                            <i class="bi bi-bar-chart"></i> Bar
                        </label>
                        <input type="radio" class="btn-check" name="chartType" id="areaChart" value="area">
                        <label class="btn btn-outline-secondary" for="areaChart">
                            <i class="bi bi-area-chart"></i> Area
                        </label>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="mainChart" width="400" height="200"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-header bg-white border-0">
                    <h5 class="card-title mb-0">Status Distribution</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="statusChart" width="400" height="200"></canvas>
                    </div>
                    <div class="mt-3">
                        <div id="statusLegend"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Secondary Charts Row -->
        <div class="col-lg-6">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0">
                    <h5 class="card-title mb-0">Monthly Comparison</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="comparisonChart" width="400" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 d-flex align-items-center justify-content-between">
                    <h5 class="card-title mb-0">Activity Heatmap</h5>
                    <small class="text-muted">Last 365 days</small>
                </div>
                <div class="card-body">
                    <div id="heatmapChart" class="heatmap-container"></div>
                </div>
            </div>
        </div>

        <!-- Trend Analysis Row -->
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0">
                    <h5 class="card-title mb-0">Trend Analysis</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-lg-8">
                            <div class="chart-container">
                                <canvas id="trendChart" width="400" height="200"></canvas>
                            </div>
                        </div>
                        <div class="col-lg-4">
                            <div class="trend-insights">
                                <h6 class="mb-3">Insights</h6>
                                <div id="trendInsights">
                                    <div class="insight-item">
                                        <div class="insight-icon">
                                            <i class="bi bi-trending-up text-success"></i>
                                        </div>
                                        <div class="insight-text">
                                            <strong>Trend Direction:</strong>
                                            <span id="trendDirection">Loading...</span>
                                        </div>
                                    </div>
                                    <div class="insight-item">
                                        <div class="insight-icon">
                                            <i class="bi bi-graph-up text-info"></i>
                                        </div>
                                        <div class="insight-text">
                                            <strong>Growth Rate:</strong>
                                            <span id="trendGrowthRate">Loading...</span>
                                        </div>
                                    </div>
                                    <div class="insight-item">
                                        <div class="insight-icon">
                                            <i class="bi bi-calendar-event text-warning"></i>
                                        </div>
                                        <div class="insight-text">
                                            <strong>Best Period:</strong>
                                            <span id="bestPeriod">Loading...</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Custom Charts Row -->
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white border-0 d-flex align-items-center justify-content-between">
                    <h5 class="card-title mb-0">Custom Analysis</h5>
                    <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#customChartModal">
                        <i class="bi bi-plus"></i> Create Chart
                    </button>
                </div>
                <div class="card-body">
                    <div class="row" id="customChartsContainer">
                        <div class="col-12 text-center py-5">
                            <i class="bi bi-bar-chart-line display-1 text-muted"></i>
                            <p class="text-muted mt-3">Create custom charts to analyze your data from different perspectives</p>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#customChartModal">
                                Create Your First Chart
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Custom Chart Modal -->
<div class="modal fade" id="customChartModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Custom Chart</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="customChartForm">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Chart Type</label>
                            <select class="form-select" id="customChartType">
                                <option value="bar">Bar Chart</option>
                                <option value="line">Line Chart</option>
                                <option value="pie">Pie Chart</option>
                                <option value="doughnut">Doughnut Chart</option>
                                <option value="radar">Radar Chart</option>
                                <option value="polarArea">Polar Area Chart</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Group By</label>
                            <select class="form-select" id="customGroupBy">
                                <option value="status">Status</option>
                                <option value="created_at">Created Date</option>
                                <option value="updated_at">Updated Date</option>
                                <!-- Add more fields based on your model -->
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Aggregation</label>
                            <select class="form-select" id="customAggregation">
                                <option value="count">Count</option>
                                <option value="sum">Sum</option>
                                <option value="avg">Average</option>
                                <option value="max">Maximum</option>
                                <option value="min">Minimum</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Aggregate Field</label>
                            <select class="form-select" id="customAggregateField">
                                <option value="*">Count Records</option>
                                <!-- Add numeric fields from your model -->
                            </select>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Chart Title</label>
                            <input type="text" class="form-control" id="customChartTitle" placeholder="Enter chart title">
                        </div>
                        <div class="col-12">
                            <label class="form-label">Filters (Optional)</label>
                            <div id="customFilters">
                                <div class="filter-row">
                                    <div class="row g-2">
                                        <div class="col-4">
                                            <select class="form-select filter-field">
                                                <option value="">Select Field</option>
                                                <option value="status">Status</option>
                                                <!-- Add more filterable fields -->
                                            </select>
                                        </div>
                                        <div class="col-3">
                                            <select class="form-select filter-operator">
                                                <option value="=">=</option>
                                                <option value="!=">!=</option>
                                                <option value="in">In</option>
                                                <option value="not_in">Not In</option>
                                            </select>
                                        </div>
                                        <div class="col-4">
                                            <input type="text" class="form-control filter-value" placeholder="Value">
                                        </div>
                                        <div class="col-1">
                                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeFilter(this)">
                                                <i class="bi bi-x"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-secondary mt-2" onclick="addFilter()">
                                <i class="bi bi-plus"></i> Add Filter
                            </button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createCustomChart()">Create Chart</button>
            </div>
        </div>
    </div>
</div>

@push('styles')
<style>
/* Chart Styles */
.chart-container {
    position: relative;
    height: 300px;
    width: 100%;
}

.stat-card {
    transition: transform 0.2s ease-in-out;
}

.stat-card:hover {
    transform: translateY(-2px);
}

.stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
}

.stat-label {
    font-size: 14px;
    color: #6c757d;
    margin-bottom: 5px;
}

.stat-value {
    font-size: 28px;
    font-weight: 700;
    color: #2c3e50;
}

/* Heatmap Styles */
.heatmap-container {
    height: 300px;
    overflow-x: auto;
    overflow-y: hidden;
}

.heatmap-cell {
    width: 12px;
    height: 12px;
    margin: 1px;
    border-radius: 2px;
    display: inline-block;
    cursor: pointer;
    transition: all 0.2s ease;
}

.heatmap-cell:hover {
    transform: scale(1.2);
    border: 2px solid #333;
}

.heatmap-legend {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 15px;
    font-size: 12px;
    color: #6c757d;
}

/* Trend Insights */
.trend-insights {
    padding: 20px 0;
}

.insight-item {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
    padding: 10px;
    background: #f8f9fa;
    border-radius: 6px;
}

.insight-icon {
    margin-right: 10px;
    font-size: 18px;
}

.insight-text {
    font-size: 14px;
}

/* Status Legend */
#statusLegend {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.legend-item {
    display: flex;
    align-items: center;
    font-size: 14px;
}

.legend-color {
    width: 16px;
    height: 16px;
    border-radius: 3px;
    margin-right: 8px;
}

/* Custom Filters */
.filter-row {
    margin-bottom: 10px;
}

/* Loading States */
.chart-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 300px;
    color: #6c757d;
}

.chart-loading i {
    font-size: 24px;
    margin-right: 10px;
}

/* Responsive */
@media (max-width: 768px) {
    .chart-container {
        height: 250px;
    }
    
    .stat-value {
        font-size: 24px;
    }
    
    .insight-item {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .insight-icon {
        margin-bottom: 5px;
        margin-right: 0;
    }
}
</style>
@endpush

@push('scripts')
<!-- ApexCharts -->
<script src="https://cdn.jsdelivr.net/npm/apexcharts@latest"></script>
<script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.min.js"></script>

<script>
// Global variables
let charts = {};
let currentPeriod = 'month';
let chartData = {};

// Initialize charts when page loads
document.addEventListener('DOMContentLoaded', function() {
    initializeCharts();
    loadRealTimeStats();
    
    // Set up periodic refresh
    setInterval(loadRealTimeStats, 30000); // Refresh every 30 seconds
});

// Chart initialization
function initializeCharts() {
    initializeMainChart();
    initializeStatusChart();
    initializeComparisonChart();
    initializeTrendChart();
    initializeHeatmap();
    initializeGaugeCharts();
}

// Main time series chart
function initializeMainChart() {
    const chartElement = document.getElementById('mainChart');
    
    const options = {
        chart: {
            type: 'line',
            height: 350,
            toolbar: {
                show: true,
                tools: {
                    download: true,
                    selection: true,
                    zoom: true,
                    zoomin: true,
                    zoomout: true,
                    pan: true,
                    reset: true
                }
            },
            animations: {
                enabled: true,
                easing: 'easeinout',
                speed: 800
            }
        },
        series: [{
            name: '{{modelPluralTitle}} Created',
            data: []
        }],
        xaxis: {
            categories: [],
            labels: {
                style: {
                    colors: '#8e8da4'
                }
            }
        },
        yaxis: {
            labels: {
                style: {
                    colors: '#8e8da4'
                }
            }
        },
        colors: ['#007bff'],
        stroke: {
            curve: 'smooth',
            width: 3
        },
        fill: {
            type: 'gradient',
            gradient: {
                shadeIntensity: 1,
                opacityFrom: 0.7,
                opacityTo: 0.1,
                stops: [0, 90, 100]
            }
        },
        grid: {
            show: true,
            borderColor: '#e0e6ed',
            strokeDashArray: 5
        },
        tooltip: {
            theme: 'dark',
            x: {
                show: true
            }
        },
        responsive: [{
            breakpoint: 768,
            options: {
                chart: {
                    height: 300
                }
            }
        }]
    };
    
    charts.main = new ApexCharts(chartElement, options);
    charts.main.render();
    
    loadMainChartData();
}

// Status distribution donut chart
function initializeStatusChart() {
    const chartElement = document.getElementById('statusChart');
    
    const options = {
        chart: {
            type: 'donut',
            height: 350
        },
        series: [],
        labels: [],
        colors: ['#28a745', '#dc3545', '#ffc107', '#6c757d'],
        plotOptions: {
            pie: {
                donut: {
                    size: '60%',
                    labels: {
                        show: true,
                        total: {
                            show: true,
                            label: 'Total',
                            color: '#373d3f',
                            formatter: function (w) {
                                return w.globals.seriesTotals.reduce((a, b) => {
                                    return a + b
                                }, 0)
                            }
                        }
                    }
                }
            }
        },
        dataLabels: {
            enabled: true,
            formatter: function (val) {
                return val.toFixed(1) + "%"
            }
        },
        legend: {
            show: false
        },
        tooltip: {
            theme: 'dark'
        },
        responsive: [{
            breakpoint: 768,
            options: {
                chart: {
                    height: 300
                }
            }
        }]
    };
    
    charts.status = new ApexCharts(chartElement, options);
    charts.status.render();
    
    loadStatusChartData();
}
document.addEventListener('DOMContentLoaded', function() {
    initializeCharts();
    loadRealTimeStats();
    
    // Set up periodic refresh
    setInterval(loadRealTimeStats, 30000); // Refresh every 30 seconds
});

// Chart initialization
function initializeCharts() {
    initializeMainChart();
    initializeStatusChart();
    initializeComparisonChart();
    initializeTrendChart();
    initializeHeatmap();
}

// Main time series chart
function initializeMainChart() {
    const ctx = document.getElementById('mainChart').getContext('2d');
    
    charts.main = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: '{{modelPluralTitle}} Created',
                data: [],
                borderColor: '#007bff',
                backgroundColor: 'rgba(0, 123, 255, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    mode: 'index',
                    intersect: false,
                }
            },
            scales: {
                x: {
                    display: true,
                    grid: {
                        display: false
                    }
                },
                y: {
                    display: true,
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(0,0,0,0.05)'
                    }
                }
            },
            interaction: {
                intersect: false,
            }
        }
    });
    
    loadMainChartData();
}

// Status distribution pie chart
function initializeStatusChart() {
    const ctx = document.getElementById('statusChart').getContext('2d');
    
    charts.status = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: [],
            datasets: [{
                data: [],
                backgroundColor: [
                    '#28a745',
                    '#dc3545',
                    '#ffc107',
                    '#6c757d'
                ],
                borderWidth: 0
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                            const percentage = ((context.parsed / total) * 100).toFixed(1);
                            return `${context.label}: ${context.parsed} (${percentage}%)`;
                        }
                    }
                }
            }
        }
    });
    
    loadStatusChartData();
}

// Monthly comparison chart
function initializeComparisonChart() {
    const ctx = document.getElementById('comparisonChart').getContext('2d');
    
    charts.comparison = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [
                {
                    label: new Date().getFullYear(),
                    data: [],
                    backgroundColor: '#007bff',
                    borderRadius: 6,
                    borderSkipped: false,
                },
                {
                    label: new Date().getFullYear() - 1,
                    data: [],
                    backgroundColor: '#6c757d',
                    borderRadius: 6,
                    borderSkipped: false,
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: true,
                    position: 'top'
                }
            },
            scales: {
                x: {
                    grid: {
                        display: false
                    }
                },
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(0,0,0,0.05)'
                    }
                }
            }
        }
    });
    
    loadComparisonChartData();
}

// Trend analysis chart
function initializeTrendChart() {
    const ctx = document.getElementById('trendChart').getContext('2d');
    
    charts.trend = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Trend',
                data: [],
                borderColor: '#17a2b8',
                backgroundColor: 'rgba(23, 162, 184, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                pointBackgroundColor: '#17a2b8',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 6
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    grid: {
                        display: false
                    }
                },
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(0,0,0,0.05)'
                    }
                }
            }
        }
    });
    
    loadTrendChartData();
}

// Data loading functions
function loadMainChartData() {
    showChartLoading('mainChart');
    
    fetch(`/api/{{getModuleInput}}/{{getNameInput}}/charts/created-over-time?period=${currentPeriod}`)
        .then(response => response.json())
        .then(data => {
            charts.main.data = data;
            charts.main.update();
            hideChartLoading('mainChart');
        })
        .catch(error => {
            console.error('Error loading main chart data:', error);
            hideChartLoading('mainChart');
        });
}

function loadStatusChartData() {
    fetch('/api/{{getModuleInput}}/{{getNameInput}}/charts/status-distribution')
        .then(response => response.json())
        .then(data => {
            charts.status.data = data;
            charts.status.update();
            updateStatusLegend(data);
        })
        .catch(error => {
            console.error('Error loading status chart data:', error);
        });
}

function loadComparisonChartData() {
    fetch('/api/{{getModuleInput}}/{{getNameInput}}/charts/monthly-comparison')
        .then(response => response.json())
        .then(data => {
            charts.comparison.data = data;
            charts.comparison.update();
        })
        .catch(error => {
            console.error('Error loading comparison chart data:', error);
        });
}

function loadTrendChartData() {
    fetch('/api/{{getModuleInput}}/{{getNameInput}}/charts/trend-analysis')
        .then(response => response.json())
        .then(data => {
            charts.trend.data = data.chart_data;
            charts.trend.update();
            updateTrendInsights(data);
        })
        .catch(error => {
            console.error('Error loading trend chart data:', error);
        });
}

function loadRealTimeStats() {
    fetch('/api/{{getModuleInput}}/{{getNameInput}}/charts/real-time-stats')
        .then(response => response.json())
        .then(data => {
            updateStatCards(data);
        })
        .catch(error => {
            console.error('Error loading real-time stats:', error);
        });
}

// UI update functions
function updateStatCards(stats) {
    document.getElementById('totalCount').textContent = stats.total.toLocaleString();
    document.getElementById('monthCount').textContent = stats.this_month.toLocaleString();
    document.getElementById('todayCount').textContent = stats.today.toLocaleString();
    document.getElementById('activeCount').textContent = stats.active_count.toLocaleString();
    
    const growthRate = document.getElementById('growthRate');
    const growthTrend = document.getElementById('growthTrend');
    
    growthRate.textContent = `${stats.growth_rate}%`;
    
    if (stats.trend === 'up') {
        growthTrend.innerHTML = '<i class="bi bi-arrow-up text-success"></i>';
        growthRate.className = 'text-success';
    } else if (stats.trend === 'down') {
        growthTrend.innerHTML = '<i class="bi bi-arrow-down text-danger"></i>';
        growthRate.className = 'text-danger';
    } else {
        growthTrend.innerHTML = '<i class="bi bi-arrow-right text-muted"></i>';
        growthRate.className = 'text-muted';
    }
}

function updateStatusLegend(data) {
    const legend = document.getElementById('statusLegend');
    legend.innerHTML = '';
    
    data.labels.forEach((label, index) => {
        const color = data.datasets[0].backgroundColor[index];
        const value = data.datasets[0].data[index];
        
        const legendItem = document.createElement('div');
        legendItem.className = 'legend-item';
        legendItem.innerHTML = `
            <div class="legend-color" style="background-color: ${color}"></div>
            <span>${label}: ${value}</span>
        `;
        legend.appendChild(legendItem);
    });
}

function updateTrendInsights(data) {
    document.getElementById('trendDirection').textContent = data.trend.charAt(0).toUpperCase() + data.trend.slice(1);
    
    // Calculate and display additional insights
    const chartData = data.data;
    const totalGrowth = chartData[chartData.length - 1].count - chartData[0].count;
    const growthRate = ((totalGrowth / chartData[0].count) * 100).toFixed(1);
    
    document.getElementById('trendGrowthRate').textContent = `${growthRate}%`;
    
    // Find best performing period
    const bestPeriod = chartData.reduce((prev, current) => (prev.count > current.count) ? prev : current);
    document.getElementById('bestPeriod').textContent = bestPeriod.period;
}

// Heatmap implementation
function initializeHeatmap() {
    fetch('/api/{{getModuleInput}}/{{getNameInput}}/charts/activity-heatmap')
        .then(response => response.json())
        .then(data => {
            renderHeatmap(data);
        })
        .catch(error => {
            console.error('Error loading heatmap data:', error);
        });
}

function renderHeatmap(data) {
    const container = document.getElementById('heatmapChart');
    container.innerHTML = '';
    
    const maxCount = Math.max(...data.map(d => d.count));
    
    // Create heatmap grid
    const heatmapGrid = document.createElement('div');
    heatmapGrid.style.display = 'grid';
    heatmapGrid.style.gridTemplateColumns = 'repeat(53, 1fr)'; // 53 weeks in a year
    heatmapGrid.style.gap = '2px';
    
    data.forEach(day => {
        const cell = document.createElement('div');
        cell.className = 'heatmap-cell';
        
        const intensity = day.count / maxCount;
        const opacity = Math.max(0.1, intensity);
        cell.style.backgroundColor = `rgba(0, 123, 255, ${opacity})`;
        
        cell.title = `${day.date}: ${day.count} {{modelNamePluralLowerCase}}`;
        
        heatmapGrid.appendChild(cell);
    });
    
    container.appendChild(heatmapGrid);
    
    // Add legend
    const legend = document.createElement('div');
    legend.className = 'heatmap-legend';
    legend.innerHTML = `
        <span>Less</span>
        <div style="margin: 0 10px; display: flex; gap: 2px;">
            <div class="heatmap-cell" style="background-color: rgba(0, 123, 255, 0.1);"></div>
            <div class="heatmap-cell" style="background-color: rgba(0, 123, 255, 0.3);"></div>
            <div class="heatmap-cell" style="background-color: rgba(0, 123, 255, 0.6);"></div>
            <div class="heatmap-cell" style="background-color: rgba(0, 123, 255, 1);"></div>
        </div>
        <span>More</span>
    `;
    container.appendChild(legend);
}

// Chart interaction functions
function updateChartPeriod(period) {
    currentPeriod = period;
    loadMainChartData();
}

function refreshCharts() {
    initializeCharts();
    loadRealTimeStats();
}

function exportChartData() {
    const data = {
        main_chart: charts.main.data,
        status_chart: charts.status.data,
        comparison_chart: charts.comparison.data,
        trend_chart: charts.trend.data
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = '{{modelNameLowerCase}}_charts_data.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

// Chart type switching
document.addEventListener('change', function(e) {
    if (e.target.name === 'chartType') {
        const newType = e.target.value;
        charts.main.config.type = newType;
        
        if (newType === 'area') {
            charts.main.config.type = 'line';
            charts.main.data.datasets[0].fill = true;
        } else {
            charts.main.data.datasets[0].fill = newType === 'area';
        }
        
        charts.main.update();
    }
});

// Custom chart functions
function addFilter() {
    const container = document.getElementById('customFilters');
    const filterRow = document.createElement('div');
    filterRow.className = 'filter-row';
    filterRow.innerHTML = `
        <div class="row g-2">
            <div class="col-4">
                <select class="form-select filter-field">
                    <option value="">Select Field</option>
                    <option value="status">Status</option>
                </select>
            </div>
            <div class="col-3">
                <select class="form-select filter-operator">
                    <option value="=">=</option>
                    <option value="!=">!=</option>
                    <option value="in">In</option>
                    <option value="not_in">Not In</option>
                </select>
            </div>
            <div class="col-4">
                <input type="text" class="form-control filter-value" placeholder="Value">
            </div>
            <div class="col-1">
                <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeFilter(this)">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        </div>
    `;
    container.appendChild(filterRow);
}

function removeFilter(button) {
    button.closest('.filter-row').remove();
}

function createCustomChart() {
    const formData = {
        chartType: document.getElementById('customChartType').value,
        groupBy: document.getElementById('customGroupBy').value,
        aggregation: document.getElementById('customAggregation').value,
        aggregateField: document.getElementById('customAggregateField').value,
        title: document.getElementById('customChartTitle').value || 'Custom Chart',
        filters: getCustomFilters()
    };
    
    fetch('/api/{{getModuleInput}}/{{getNameInput}}/charts/custom', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        addCustomChartToContainer(data, formData);
        bootstrap.Modal.getInstance(document.getElementById('customChartModal')).hide();
        document.getElementById('customChartForm').reset();
    })
    .catch(error => {
        console.error('Error creating custom chart:', error);
        alert('Error creating chart. Please try again.');
    });
}

function getCustomFilters() {
    const filters = {};
    const filterRows = document.querySelectorAll('#customFilters .filter-row');
    
    filterRows.forEach(row => {
        const field = row.querySelector('.filter-field').value;
        const operator = row.querySelector('.filter-operator').value;
        const value = row.querySelector('.filter-value').value;
        
        if (field && value) {
            filters[field] = { operator, value };
        }
    });
    
    return filters;
}

function addCustomChartToContainer(chartData, config) {
    const container = document.getElementById('customChartsContainer');
    
    // Remove empty state if it exists
    if (container.querySelector('.text-center')) {
        container.innerHTML = '';
    }
    
    const chartCol = document.createElement('div');
    chartCol.className = 'col-lg-6 mb-4';
    
    const chartId = `customChart_${Date.now()}`;
    
    chartCol.innerHTML = `
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-white border-0 d-flex align-items-center justify-content-between">
                <h6 class="card-title mb-0">${config.title}</h6>
                <button class="btn btn-sm btn-outline-danger" onclick="removeCustomChart(this)">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="${chartId}" width="400" height="300"></canvas>
                </div>
            </div>
        </div>
    `;
    
    container.appendChild(chartCol);
    
    // Create the chart
    const ctx = document.getElementById(chartId).getContext('2d');
    new Chart(ctx, {
        type: config.chartType,
        data: chartData,
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: ['pie', 'doughnut', 'polarArea'].includes(config.chartType)
                }
            }
        }
    });
}

function removeCustomChart(button) {
    if (confirm('Are you sure you want to remove this chart?')) {
        button.closest('.col-lg-6').remove();
        
        // Check if container is empty and show empty state
        const container = document.getElementById('customChartsContainer');
        if (container.children.length === 0) {
            container.innerHTML = `
                <div class="col-12 text-center py-5">
                    <i class="bi bi-bar-chart-line display-1 text-muted"></i>
                    <p class="text-muted mt-3">Create custom charts to analyze your data from different perspectives</p>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#customChartModal">
                        Create Your First Chart
                    </button>
                </div>
            `;
        }
    }
}

// Loading states
function showChartLoading(chartId) {
    const canvas = document.getElementById(chartId);
    const container = canvas.parentElement;
    
    const loading = document.createElement('div');
    loading.className = 'chart-loading';
    loading.innerHTML = '<i class="bi bi-arrow-clockwise spin"></i> Loading chart data...';
    
    container.appendChild(loading);
    canvas.style.display = 'none';
}

function hideChartLoading(chartId) {
    const canvas = document.getElementById(chartId);
    const container = canvas.parentElement;
    
    const loading = container.querySelector('.chart-loading');
    if (loading) {
        loading.remove();
    }
    
    canvas.style.display = 'block';
}
</script>
@endpush