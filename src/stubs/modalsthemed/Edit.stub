<?php

namespace Modules\{{getModuleInputModuleNew}}\Livewire\{{modelPluralName}};

use Livewire\Component;
use Livewire\WithPagination;
use Modules\{{getModuleInputModuleNew}}\Models\{{modelName}};
use Carbon\Carbon;
use Livewire\Attributes\On;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Storage;
use Intervention\Image\Facades\Image;
use Livewire\Features\SupportFileUploads\WithFileUploads;

class Edit extends Component
{
    use WithPagination;
    use WithFileUploads;
	protected $paginationTheme = 'bootstrap';
    public $selected_id, $newimage, {{updatefield}};
    public $indexSearch = '';
    public $selecteditem = [];
    protected $queryString = ['indexSearch'];
    public $updateMode = false;
    #[On('closeModal')]

    public function mount($id)
    {
        $record = {{modelName}}::findOrFail($id);
        $this->selected_id = $id; {{editfields}}
        $this->updateMode = true;

         //     $this->status = 'active';
    
    }

    public function render()
    {
        return view('{{getModuleInput}}::livewire.' . My_Theme() . '.{{modelNamePluralLowerCase}}.update');
    }


    public function update($selected_id)
    {
        $this->validate([{{rules}}
        ]);
        // if (!$this->newimage) {
        //     $photo = $this->photo;
        // }else{
        //     $photo = $this->storeImage();
        // }

        if ($selected_id) {
			$record = {{modelName}}::find($selected_id);
            $record->update([ {{addfields}}
            ]);

            $this->dispatch('refresh-the-component');
            $this->dispatch('hideModal');
            $this->updateMode = false;
            flash()->addSuccess('{{modelName}} Successfully updated.');
           // return $this->redirect('/{{getModuleInput}}/{{getNameInput}}',navigate:true);
			// session()->flash('message', '{{modelName}} Successfully updated.');
        }
    }


}
