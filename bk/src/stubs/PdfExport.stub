<?php

namespace App\Exports;

use App\Models\{{modelName}};
use Illuminate\Contracts\View\View;
use Maatwebsite\Excel\Concerns\FromView;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\WithColumnWidths;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Events\AfterSheet;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use Barryvdh\DomPDF\Facade\Pdf;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Storage;
use Illuminate\Http\Response;

/**
 * {{modelName}} PDF Export Class
 * 
 * Handles comprehensive PDF export functionality including:
 * - Multiple export formats (PDF, Excel, CSV)
 * - Custom templates and styling
 * - Advanced filtering and formatting
 * - Batch processing for large datasets
 */
class {{modelName}}PdfExport implements FromView, FromCollection, WithHeadings, WithMapping, WithStyles, WithColumnWidths, WithEvents, ShouldAutoSize
{
    protected $data;
    protected $filters;
    protected $format;
    protected $template;
    protected $options;
    protected $headers;
    protected $title;
    protected $orientation;
    protected $paperSize;
    
    /**
     * Create a new export instance
     */
    public function __construct(
        $data = null, 
        array $filters = [], 
        string $format = 'pdf',
        string $template = 'default',
        array $options = []
    ) {
        $this->data = $data ?? {{modelName}}::query();
        $this->filters = $filters;
        $this->format = $format;
        $this->template = $template;
        $this->options = array_merge([
            'title' => '{{modelPluralTitle}} Export',
            'orientation' => 'portrait',
            'paper_size' => 'a4',
            'show_headers' => true,
            'show_filters' => true,
            'show_summary' => true,
            'include_charts' => false,
            'compress' => false,
            'password' => null,
            'watermark' => null,
            'custom_css' => null,
        ], $options);
        
        $this->title = $this->options['title'];
        $this->orientation = $this->options['orientation'];
        $this->paperSize = $this->options['paper_size'];
        
        $this->setupHeaders();
    }

    /**
     * Generate and return the export file
     */
    public function export(): Response
    {
        try {
            switch ($this->format) {
                case 'pdf':
                    return $this->exportToPdf();
                case 'excel':
                case 'xlsx':
                    return $this->exportToExcel();
                case 'csv':
                    return $this->exportToCsv();
                default:
                    throw new \InvalidArgumentException("Unsupported export format: {$this->format}");
            }
        } catch (\Exception $e) {
            throw new \Exception("Export failed: " . $e->getMessage());
        }
    }

    /**
     * Export to PDF format
     */
    protected function exportToPdf(): Response
    {
        $data = $this->getFilteredData();
        $summary = $this->generateSummary($data);
        
        $viewData = [
            'data' => $data,
            'filters' => $this->filters,
            'summary' => $summary,
            'options' => $this->options,
            'title' => $this->title,
            'headers' => $this->headers,
            'exportDate' => now()->format('Y-m-d H:i:s'),
        ];

        $pdf = Pdf::loadView($this->getPdfTemplate(), $viewData);
        
        // Configure PDF options
        $pdf->setPaper($this->paperSize, $this->orientation);
        
        if ($this->options['password']) {
            $pdf->setEncryption($this->options['password']);
        }

        if ($this->options['watermark']) {
            $pdf->setOption('watermark', $this->options['watermark']);
        }

        $filename = $this->generateFilename('pdf');
        
        return $pdf->download($filename);
    }

    /**
     * Export to Excel format
     */
    protected function exportToExcel(): Response
    {
        $filename = $this->generateFilename('xlsx');
        
        return \Maatwebsite\Excel\Facades\Excel::download($this, $filename);
    }

    /**
     * Export to CSV format
     */
    protected function exportToCsv(): Response
    {
        $data = $this->getFilteredData();
        $filename = $this->generateFilename('csv');
        
        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => "attachment; filename=\"{$filename}\"",
        ];

        return response()->streamDownload(function() use ($data) {
            $file = fopen('php://output', 'w');
            
            // Add CSV headers
            if ($this->options['show_headers']) {
                fputcsv($file, array_values($this->headers));
            }
            
            // Add data rows
            foreach ($data as $record) {
                fputcsv($file, $this->mapRowData($record));
            }
            
            fclose($file);
        }, $filename, $headers);
    }

    /**
     * Get filtered data for export
     */
    protected function getFilteredData(): Collection
    {
        $query = is_a($this->data, \Illuminate\Database\Eloquent\Builder::class) 
            ? $this->data 
            : {{modelName}}::query();

        // Apply filters
        foreach ($this->filters as $field => $value) {
            if (!empty($value)) {
                if (is_array($value)) {
                    $query->whereIn($field, $value);
                } elseif (str_contains($value, '%')) {
                    $query->where($field, 'like', $value);
                } else {
                    $query->where($field, $value);
                }
            }
        }

        // Add date range filtering if specified
        if (isset($this->filters['date_from'])) {
            $query->where('created_at', '>=', $this->filters['date_from']);
        }
        
        if (isset($this->filters['date_to'])) {
            $query->where('created_at', '<=', $this->filters['date_to']);
        }

        return $query->get();
    }

    /**
     * Generate summary statistics
     */
    protected function generateSummary(Collection $data): array
    {
        if (!$this->options['show_summary']) {
            return [];
        }

        $summary = [
            'total_records' => $data->count(),
            'export_date' => now()->format('Y-m-d H:i:s'),
            'filters_applied' => count(array_filter($this->filters)),
        ];

        // Add numeric field summaries
        $numericFields = $this->getNumericFields();
        foreach ($numericFields as $field) {
            if ($data->first() && isset($data->first()->$field)) {
                $summary[$field . '_sum'] = $data->sum($field);
                $summary[$field . '_avg'] = $data->avg($field);
                $summary[$field . '_min'] = $data->min($field);
                $summary[$field . '_max'] = $data->max($field);
            }
        }

        // Add status distribution if status field exists
        if ($data->first() && isset($data->first()->status)) {
            $summary['status_distribution'] = $data->groupBy('status')
                ->map(fn($group) => $group->count())
                ->toArray();
        }

        return $summary;
    }

    /**
     * Setup export headers
     */
    protected function setupHeaders(): void
    {
        // Get model fillable fields or define custom headers
        $model = new {{modelName}}();
        $fillable = $model->getFillable();
        
        // Convert field names to readable headers
        $this->headers = [];
        foreach ($fillable as $field) {
            $this->headers[$field] = $this->formatHeaderName($field);
        }
        
        // Add common fields if they exist
        $commonFields = ['id', 'created_at', 'updated_at', 'status'];
        foreach ($commonFields as $field) {
            if (!isset($this->headers[$field])) {
                $this->headers[$field] = $this->formatHeaderName($field);
            }
        }
    }

    /**
     * Format field name to readable header
     */
    protected function formatHeaderName(string $field): string
    {
        return ucwords(str_replace(['_', '-'], ' ', $field));
    }

    /**
     * Get numeric fields for summary calculations
     */
    protected function getNumericFields(): array
    {
        return ['amount', 'price', 'quantity', 'total', 'count', 'score', 'rating'];
    }

    /**
     * Generate filename for export
     */
    protected function generateFilename(string $extension): string
    {
        $baseFilename = str_replace(' ', '_', strtolower($this->title));
        $timestamp = now()->format('Y-m-d_H-i-s');
        
        return "{$baseFilename}_{$timestamp}.{$extension}";
    }

    /**
     * Get PDF template path
     */
    protected function getPdfTemplate(): string
    {
        $basePath = 'exports.{{modelNamePluralLowerCase}}';
        
        $templates = [
            'detailed' => "{$basePath}.pdf-detailed",
            'summary' => "{$basePath}.pdf-summary", 
            'minimal' => "{$basePath}.pdf-minimal",
            'default' => "{$basePath}.pdf-export",
        ];

        return $templates[$this->template] ?? $templates['default'];
    }

    /**
     * Map record data for export
     */
    protected function mapRowData($record): array
    {
        $data = [];
        
        foreach (array_keys($this->headers) as $field) {
            $value = $record->$field ?? '';
            
            // Format specific field types
            $data[] = $this->formatFieldValue($field, $value);
        }
        
        return $data;
    }

    /**
     * Format field values for export
     */
    protected function formatFieldValue(string $field, $value): string
    {
        if (is_null($value)) {
            return '';
        }

        // Date formatting
        if (in_array($field, ['created_at', 'updated_at', 'deleted_at'])) {
            return $value instanceof \Carbon\Carbon 
                ? $value->format('Y-m-d H:i:s') 
                : $value;
        }

        // Boolean formatting
        if (is_bool($value)) {
            return $value ? 'Yes' : 'No';
        }

        // Array/JSON formatting
        if (is_array($value) || (is_string($value) && is_array(json_decode($value, true)))) {
            $array = is_array($value) ? $value : json_decode($value, true);
            return implode(', ', $array);
        }

        // Numeric formatting
        if (is_numeric($value) && in_array($field, ['amount', 'price', 'total'])) {
            return number_format($value, 2);
        }

        return (string) $value;
    }

    // Excel-specific methods

    /**
     * Return collection for Excel export
     */
    public function collection(): Collection
    {
        return $this->getFilteredData();
    }

    /**
     * Return view for Excel export
     */
    public function view(): View
    {
        $data = $this->getFilteredData();
        $summary = $this->generateSummary($data);
        
        return view('exports.{{modelNamePluralLowerCase}}.excel-export', [
            'data' => $data,
            'summary' => $summary,
            'headers' => $this->headers,
            'options' => $this->options,
        ]);
    }

    /**
     * Excel headings
     */
    public function headings(): array
    {
        return $this->options['show_headers'] ? array_values($this->headers) : [];
    }

    /**
     * Map data for Excel rows
     */
    public function map($record): array
    {
        return $this->mapRowData($record);
    }

    /**
     * Excel styling
     */
    public function styles(Worksheet $sheet): array
    {
        return [
            1 => [
                'font' => ['bold' => true, 'size' => 12],
                'fill' => [
                    'fillType' => Fill::FILL_SOLID,
                    'color' => ['rgb' => 'E2E8F0']
                ],
                'alignment' => [
                    'horizontal' => Alignment::HORIZONTAL_CENTER,
                ],
                'borders' => [
                    'allBorders' => [
                        'borderStyle' => Border::BORDER_THIN,
                    ],
                ],
            ],
        ];
    }

    /**
     * Excel column widths
     */
    public function columnWidths(): array
    {
        $widths = [];
        $columns = array_keys($this->headers);
        
        foreach ($columns as $index => $column) {
            $letter = chr(65 + $index); // A, B, C, etc.
            $widths[$letter] = $this->getColumnWidth($column);
        }
        
        return $widths;
    }

    /**
     * Get appropriate column width based on field type
     */
    protected function getColumnWidth(string $field): int
    {
        $widthMap = [
            'id' => 10,
            'name' => 25,
            'title' => 30,
            'description' => 40,
            'email' => 25,
            'phone' => 15,
            'status' => 12,
            'created_at' => 18,
            'updated_at' => 18,
        ];

        return $widthMap[$field] ?? 15;
    }

    /**
     * Excel events
     */
    public function registerEvents(): array
    {
        return [
            AfterSheet::class => function(AfterSheet $event) {
                // Add title row if specified
                if ($this->options['show_headers']) {
                    $event->sheet->getDelegate()->insertNewRowBefore(1);
                    $event->sheet->setCellValue('A1', $this->title);
                    $event->sheet->mergeCells('A1:' . chr(64 + count($this->headers)) . '1');
                    
                    $event->sheet->getStyle('A1')->applyFromArray([
                        'font' => [
                            'bold' => true,
                            'size' => 16,
                        ],
                        'alignment' => [
                            'horizontal' => Alignment::HORIZONTAL_CENTER,
                        ],
                    ]);
                }

                // Auto-filter for data
                $lastColumn = chr(64 + count($this->headers));
                $lastRow = $event->sheet->getHighestRow();
                $event->sheet->setAutoFilter("A2:{$lastColumn}{$lastRow}");
            },
        ];
    }

    /**
     * Save export to storage
     */
    public function saveToStorage(string $disk = 'local', string $path = 'exports'): string
    {
        $filename = $this->generateFilename($this->format);
        $fullPath = $path . '/' . $filename;
        
        $content = $this->getExportContent();
        Storage::disk($disk)->put($fullPath, $content);
        
        return $fullPath;
    }

    /**
     * Get export content as string
     */
    protected function getExportContent(): string
    {
        switch ($this->format) {
            case 'pdf':
                $data = $this->getFilteredData();
                $summary = $this->generateSummary($data);
                
                $viewData = [
                    'data' => $data,
                    'filters' => $this->filters,
                    'summary' => $summary,
                    'options' => $this->options,
                    'title' => $this->title,
                    'headers' => $this->headers,
                    'exportDate' => now()->format('Y-m-d H:i:s'),
                ];

                $pdf = Pdf::loadView($this->getPdfTemplate(), $viewData);
                $pdf->setPaper($this->paperSize, $this->orientation);
                
                return $pdf->output();
                
            case 'csv':
                $data = $this->getFilteredData();
                $csv = '';
                
                if ($this->options['show_headers']) {
                    $csv .= implode(',', array_values($this->headers)) . "\n";
                }
                
                foreach ($data as $record) {
                    $csv .= implode(',', $this->mapRowData($record)) . "\n";
                }
                
                return $csv;
                
            default:
                throw new \InvalidArgumentException("Cannot get content for format: {$this->format}");
        }
    }

    /**
     * Static factory methods for convenience
     */
    public static function pdf($data = null, array $filters = [], array $options = []): self
    {
        return new static($data, $filters, 'pdf', 'default', $options);
    }

    public static function excel($data = null, array $filters = [], array $options = []): self
    {
        return new static($data, $filters, 'xlsx', 'default', $options);
    }

    public static function csv($data = null, array $filters = [], array $options = []): self
    {
        return new static($data, $filters, 'csv', 'default', $options);
    }
}
