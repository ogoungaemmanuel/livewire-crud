// Import required dependencies
require('./bootstrap');

// Import third-party libraries
import Alpine from 'alpinejs';
import ApexCharts from 'apexcharts';
import { Calendar } from '@fullcalendar/core';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import listPlugin from '@fullcalendar/list';

// Make Alpine.js available globally
window.Alpine = Alpine;

// Make ApexCharts available globally
window.ApexCharts = ApexCharts;

// Make FullCalendar available globally
window.FullCalendar = {
    Calendar,
    dayGridPlugin,
    timeGridPlugin,
    interactionPlugin,
    listPlugin
};

/**
 * Application Configuration
 */
const AppConfig = {
    // API endpoints
    api: {
        base: '/api',
        charts: '/api/charts',
        calendar: '/api/calendar',
        notifications: '/api/notifications',
        export: '/api/export'
    },
    
    // Chart configuration
    charts: {
        defaultColors: ['#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0'],
        animations: {
            enabled: true,
            easing: 'easeinout',
            speed: 800
        },
        toolbar: {
            show: true,
            tools: {
                download: true,
                selection: true,
                zoom: true,
                zoomin: true,
                zoomout: true,
                pan: true,
                reset: true
            }
        }
    },
    
    // Calendar configuration
    calendar: {
        initialView: 'dayGridMonth',
        headerToolbar: {
            left: 'prev,next today',
            center: 'title',
            right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
        },
        height: 'auto',
        navLinks: true,
        editable: true,
        selectable: true,
        selectMirror: true,
        dayMaxEvents: true
    },
    
    // Notification configuration
    notifications: {
        position: 'top-right',
        timeout: 5000,
        maxVisible: 5
    }
};

/**
 * Chart Management Class
 */
class ChartManager {
    constructor() {
        this.charts = new Map();
        this.defaultOptions = {
            chart: {
                animations: AppConfig.charts.animations,
                toolbar: AppConfig.charts.toolbar
            },
            colors: AppConfig.charts.defaultColors,
            theme: {
                mode: document.documentElement.classList.contains('dark') ? 'dark' : 'light'
            }
        };
    }

    /**
     * Create a new chart
     */
    create(elementId, options) {
        const element = document.querySelector(elementId);
        if (!element) {
            console.error(`Chart element ${elementId} not found`);
            return null;
        }

        const mergedOptions = this.mergeOptions(options);
        const chart = new ApexCharts(element, mergedOptions);
        
        chart.render().then(() => {
            this.charts.set(elementId, chart);
            console.log(`Chart ${elementId} rendered successfully`);
        }).catch(error => {
            console.error(`Error rendering chart ${elementId}:`, error);
        });

        return chart;
    }

    /**
     * Update chart data
     */
    updateData(elementId, newData) {
        const chart = this.charts.get(elementId);
        if (chart) {
            chart.updateSeries(newData);
        }
    }

    /**
     * Destroy chart
     */
    destroy(elementId) {
        const chart = this.charts.get(elementId);
        if (chart) {
            chart.destroy();
            this.charts.delete(elementId);
        }
    }

    /**
     * Merge chart options with defaults
     */
    mergeOptions(userOptions) {
        return {
            ...this.defaultOptions,
            ...userOptions,
            chart: {
                ...this.defaultOptions.chart,
                ...userOptions.chart
            }
        };
    }

    /**
     * Toggle theme for all charts
     */
    toggleTheme(isDark) {
        this.charts.forEach(chart => {
            chart.updateOptions({
                theme: {
                    mode: isDark ? 'dark' : 'light'
                }
            });
        });
    }
}

/**
 * Calendar Management Class
 */
class CalendarManager {
    constructor() {
        this.calendars = new Map();
    }

    /**
     * Initialize calendar
     */
    init(elementId, options = {}) {
        const element = document.querySelector(elementId);
        if (!element) {
            console.error(`Calendar element ${elementId} not found`);
            return null;
        }

        const calendarOptions = {
            ...AppConfig.calendar,
            ...options,
            plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, listPlugin]
        };

        const calendar = new Calendar(element, calendarOptions);
        calendar.render();
        
        this.calendars.set(elementId, calendar);
        return calendar;
    }

    /**
     * Get calendar instance
     */
    get(elementId) {
        return this.calendars.get(elementId);
    }

    /**
     * Add event to calendar
     */
    addEvent(elementId, event) {
        const calendar = this.calendars.get(elementId);
        if (calendar) {
            calendar.addEvent(event);
        }
    }

    /**
     * Remove event from calendar
     */
    removeEvent(elementId, eventId) {
        const calendar = this.calendars.get(elementId);
        if (calendar) {
            const event = calendar.getEventById(eventId);
            if (event) {
                event.remove();
            }
        }
    }

    /**
     * Refresh calendar events
     */
    refetchEvents(elementId) {
        const calendar = this.calendars.get(elementId);
        if (calendar) {
            calendar.refetchEvents();
        }
    }
}

/**
 * Notification Management Class
 */
class NotificationManager {
    constructor() {
        this.notifications = [];
        this.container = this.createContainer();
    }

    /**
     * Create notification container
     */
    createContainer() {
        let container = document.querySelector('#notification-container');
        if (!container) {
            container = document.createElement('div');
            container.id = 'notification-container';
            container.className = `fixed ${AppConfig.notifications.position.replace('-', ' ')} z-50 p-4 space-y-2`;
            document.body.appendChild(container);
        }
        return container;
    }

    /**
     * Show notification
     */
    show(message, type = 'info', options = {}) {
        const notification = this.createNotification(message, type, options);
        this.container.appendChild(notification);
        this.notifications.push(notification);

        // Auto-remove after timeout
        setTimeout(() => {
            this.remove(notification);
        }, options.timeout || AppConfig.notifications.timeout);

        // Limit visible notifications
        this.limitVisible();

        return notification;
    }

    /**
     * Create notification element
     */
    createNotification(message, type, options) {
        const notification = document.createElement('div');
        const typeClasses = {
            success: 'bg-green-500 text-white',
            error: 'bg-red-500 text-white',
            warning: 'bg-yellow-500 text-black',
            info: 'bg-blue-500 text-white'
        };

        notification.className = `
            ${typeClasses[type] || typeClasses.info}
            p-4 rounded-lg shadow-lg max-w-sm w-full
            transform transition-all duration-300 ease-in-out
            translate-x-full opacity-0
        `;

        notification.innerHTML = `
            <div class="flex items-center justify-between">
                <p class="text-sm font-medium">${message}</p>
                <button type="button" class="ml-2 text-lg font-semibold" onclick="this.parentElement.parentElement.remove()">
                    &times;
                </button>
            </div>
        `;

        // Animate in
        setTimeout(() => {
            notification.classList.remove('translate-x-full', 'opacity-0');
        }, 10);

        return notification;
    }

    /**
     * Remove notification
     */
    remove(notification) {
        if (notification && notification.parentElement) {
            notification.classList.add('translate-x-full', 'opacity-0');
            setTimeout(() => {
                notification.remove();
                this.notifications = this.notifications.filter(n => n !== notification);
            }, 300);
        }
    }

    /**
     * Limit visible notifications
     */
    limitVisible() {
        while (this.notifications.length > AppConfig.notifications.maxVisible) {
            const oldest = this.notifications.shift();
            this.remove(oldest);
        }
    }

    /**
     * Clear all notifications
     */
    clearAll() {
        this.notifications.forEach(notification => {
            this.remove(notification);
        });
    }
}

/**
 * Utility Functions
 */
const Utils = {
    /**
     * Format date
     */
    formatDate(date, format = 'YYYY-MM-DD') {
        const d = new Date(date);
        const map = {
            'YYYY': d.getFullYear(),
            'MM': String(d.getMonth() + 1).padStart(2, '0'),
            'DD': String(d.getDate()).padStart(2, '0'),
            'HH': String(d.getHours()).padStart(2, '0'),
            'mm': String(d.getMinutes()).padStart(2, '0'),
            'ss': String(d.getSeconds()).padStart(2, '0')
        };

        return format.replace(/YYYY|MM|DD|HH|mm|ss/gi, match => map[match]);
    },

    /**
     * Debounce function
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },

    /**
     * Throttle function
     */
    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    },

    /**
     * Format number with thousands separator
     */
    formatNumber(num) {
        return new Intl.NumberFormat().format(num);
    },

    /**
     * Format currency
     */
    formatCurrency(amount, currency = 'USD') {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: currency
        }).format(amount);
    },

    /**
     * Copy text to clipboard
     */
    async copyToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            App.notifications.show('Copied to clipboard!', 'success');
        } catch (err) {
            console.error('Failed to copy text: ', err);
            App.notifications.show('Failed to copy text', 'error');
        }
    },

    /**
     * Download file
     */
    downloadFile(url, filename) {
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
};

/**
 * Main Application Class
 */
class Application {
    constructor() {
        this.charts = new ChartManager();
        this.calendar = new CalendarManager();
        this.notifications = new NotificationManager();
        this.utils = Utils;
        this.config = AppConfig;
    }

    /**
     * Initialize application
     */
    init() {
        this.setupEventListeners();
        this.setupThemeToggle();
        this.setupLivewireListeners();
        console.log('Application initialized successfully');
    }

    /**
     * Setup global event listeners
     */
    setupEventListeners() {
        // Handle form submissions
        document.addEventListener('submit', (e) => {
            if (e.target.matches('.ajax-form')) {
                e.preventDefault();
                this.handleAjaxForm(e.target);
            }
        });

        // Handle keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + K for search
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                this.focusSearch();
            }

            // Escape to close modals
            if (e.key === 'Escape') {
                this.closeModals();
            }
        });

        // Handle window resize for charts
        window.addEventListener('resize', this.utils.debounce(() => {
            this.charts.charts.forEach(chart => {
                chart.resize();
            });
        }, 250));
    }

    /**
     * Setup theme toggle functionality
     */
    setupThemeToggle() {
        const themeToggle = document.querySelector('[data-theme-toggle]');
        if (themeToggle) {
            themeToggle.addEventListener('click', () => {
                const isDark = document.documentElement.classList.toggle('dark');
                localStorage.setItem('theme', isDark ? 'dark' : 'light');
                this.charts.toggleTheme(isDark);
            });
        }

        // Apply saved theme
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
            document.documentElement.classList.add('dark');
        }
    }

    /**
     * Setup Livewire event listeners
     */
    setupLivewireListeners() {
        // Chart updates
        Livewire.on('chart-updated', (data) => {
            this.charts.updateData(data.chartId, data.series);
        });

        // Calendar events
        Livewire.on('calendar-event-added', (event) => {
            this.calendar.addEvent('#calendar', event);
        });

        Livewire.on('calendar-event-removed', (eventId) => {
            this.calendar.removeEvent('#calendar', eventId);
        });

        Livewire.on('calendar-refresh', () => {
            this.calendar.refetchEvents('#calendar');
        });

        // Notifications
        Livewire.on('notification', (data) => {
            this.notifications.show(data.message, data.type, data.options);
        });

        // Export operations
        Livewire.on('export-ready', (data) => {
            this.utils.downloadFile(data.url, data.filename);
            this.notifications.show('Export completed successfully!', 'success');
        });

        // Print operations
        Livewire.on('print-ready', () => {
            window.print();
        });
    }

    /**
     * Handle AJAX form submissions
     */
    async handleAjaxForm(form) {
        const formData = new FormData(form);
        const url = form.action;
        const method = form.method || 'POST';

        try {
            const response = await fetch(url, {
                method: method,
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                }
            });

            const data = await response.json();

            if (data.success) {
                this.notifications.show(data.message || 'Operation completed successfully!', 'success');
                if (data.redirect) {
                    window.location.href = data.redirect;
                }
            } else {
                this.notifications.show(data.message || 'An error occurred', 'error');
            }
        } catch (error) {
            console.error('AJAX form error:', error);
            this.notifications.show('Network error occurred', 'error');
        }
    }

    /**
     * Focus search input
     */
    focusSearch() {
        const searchInput = document.querySelector('[data-search-input]');
        if (searchInput) {
            searchInput.focus();
        }
    }

    /**
     * Close all modals
     */
    closeModals() {
        const modals = document.querySelectorAll('[data-modal]');
        modals.forEach(modal => {
            if (modal.style.display !== 'none') {
                modal.style.display = 'none';
            }
        });
    }
}

/**
 * Initialize Application
 */
const App = new Application();

// Make App available globally
window.App = App;

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => App.init());
} else {
    App.init();
}

// Start Alpine.js
Alpine.start();

// Export for module usage
export default App;