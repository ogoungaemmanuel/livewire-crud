<?php

namespace Database\Factories;

use App\Models\{{modelName}};
use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;
use Illuminate\Support\Carbon;

/**
 * {{modelName}} Factory
 * 
 * Generates realistic test data for {{modelName}} model
 * Supports various data types and relationships
 */
class {{modelName}}Factory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = {{modelName}}::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [{{factory}}
        ];
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with active status
     */
    public function active(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'active',
            'is_active' => true,
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with inactive status
     */
    public function inactive(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'inactive',
            'is_active' => false,
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with pending status
     */
    public function pending(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'pending',
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with published status
     */
    public function published(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'published',
            'published_at' => $this->faker->dateTimeBetween('-1 year', 'now'),
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with draft status
     */
    public function draft(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'draft',
            'published_at' => null,
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with archived status
     */
    public function archived(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'archived',
            'archived_at' => $this->faker->dateTimeBetween('-6 months', 'now'),
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with featured flag
     */
    public function featured(): static
    {
        return $this->state(fn (array $attributes) => [
            'is_featured' => true,
            'featured_at' => $this->faker->dateTimeBetween('-3 months', 'now'),
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with priority level
     */
    public function priority(string $level = 'high'): static
    {
        return $this->state(fn (array $attributes) => [
            'priority' => $level,
            'priority_level' => match($level) {
                'low' => 1,
                'medium' => 2,
                'high' => 3,
                'urgent' => 4,
                'critical' => 5,
                default => 2,
            },
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with random category
     */
    public function withCategory(): static
    {
        return $this->state(fn (array $attributes) => [
            'category' => $this->faker->randomElement([
                'general', 'special', 'premium', 'standard', 'basic',
                'advanced', 'professional', 'enterprise', 'personal'
            ]),
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with tags
     */
    public function withTags(int $count = 3): static
    {
        $tags = $this->faker->randomElements([
            'important', 'urgent', 'review', 'approved', 'pending',
            'featured', 'popular', 'trending', 'new', 'updated',
            'verified', 'premium', 'standard', 'basic', 'advanced'
        ], $count);

        return $this->state(fn (array $attributes) => [
            'tags' => implode(',', $tags),
            'tag_list' => json_encode($tags),
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with metadata
     */
    public function withMetadata(): static
    {
        return $this->state(fn (array $attributes) => [
            'metadata' => json_encode([
                'created_by_ip' => $this->faker->ipv4,
                'user_agent' => $this->faker->userAgent,
                'source' => $this->faker->randomElement(['web', 'mobile', 'api', 'import']),
                'version' => $this->faker->semver(),
                'settings' => [
                    'notifications' => $this->faker->boolean,
                    'auto_save' => $this->faker->boolean,
                    'visibility' => $this->faker->randomElement(['public', 'private', 'internal']),
                ],
            ]),
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with recent dates
     */
    public function recent(): static
    {
        return $this->state(fn (array $attributes) => [
            'created_at' => $this->faker->dateTimeBetween('-1 month', 'now'),
            'updated_at' => $this->faker->dateTimeBetween('-1 week', 'now'),
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with old dates
     */
    public function old(): static
    {
        return $this->state(fn (array $attributes) => [
            'created_at' => $this->faker->dateTimeBetween('-2 years', '-1 year'),
            'updated_at' => $this->faker->dateTimeBetween('-1 year', '-6 months'),
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with specific user
     */
    public function forUser($userId): static
    {
        return $this->state(fn (array $attributes) => [
            'user_id' => $userId,
            'created_by' => $userId,
            'updated_by' => $userId,
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with random numerical values
     */
    public function withRandomNumbers(): static
    {
        return $this->state(fn (array $attributes) => [
            'quantity' => $this->faker->numberBetween(1, 100),
            'amount' => $this->faker->randomFloat(2, 10, 1000),
            'price' => $this->faker->randomFloat(2, 5, 500),
            'discount' => $this->faker->randomFloat(2, 0, 50),
            'rating' => $this->faker->randomFloat(1, 1, 5),
            'score' => $this->faker->numberBetween(0, 100),
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with contact information
     */
    public function withContact(): static
    {
        return $this->state(fn (array $attributes) => [
            'phone' => $this->faker->phoneNumber,
            'mobile' => $this->faker->phoneNumber,
            'email' => $this->faker->unique()->safeEmail,
            'website' => $this->faker->url,
            'address' => $this->faker->address,
            'city' => $this->faker->city,
            'state' => $this->faker->state,
            'country' => $this->faker->country,
            'postal_code' => $this->faker->postcode,
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with images/files
     */
    public function withMedia(): static
    {
        return $this->state(fn (array $attributes) => [
            'image' => $this->faker->imageUrl(800, 600),
            'thumbnail' => $this->faker->imageUrl(200, 150),
            'avatar' => $this->faker->imageUrl(100, 100),
            'file_path' => $this->faker->filePath(),
            'file_name' => $this->faker->word . '.' . $this->faker->fileExtension,
            'file_size' => $this->faker->numberBetween(1024, 5242880), // 1KB to 5MB
            'mime_type' => $this->faker->mimeType,
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with social media links
     */
    public function withSocial(): static
    {
        return $this->state(fn (array $attributes) => [
            'facebook_url' => 'https://facebook.com/' . $this->faker->userName,
            'twitter_url' => 'https://twitter.com/' . $this->faker->userName,
            'instagram_url' => 'https://instagram.com/' . $this->faker->userName,
            'linkedin_url' => 'https://linkedin.com/in/' . $this->faker->userName,
            'youtube_url' => 'https://youtube.com/channel/' . $this->faker->uuid,
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with financial data
     */
    public function withFinancials(): static
    {
        return $this->state(fn (array $attributes) => [
            'price' => $this->faker->randomFloat(2, 10, 1000),
            'cost' => $this->faker->randomFloat(2, 5, 500),
            'tax_rate' => $this->faker->randomFloat(2, 0, 25),
            'discount_percentage' => $this->faker->randomFloat(2, 0, 50),
            'currency' => $this->faker->currencyCode,
            'payment_status' => $this->faker->randomElement(['pending', 'paid', 'failed', 'refunded']),
            'payment_method' => $this->faker->randomElement(['credit_card', 'debit_card', 'paypal', 'bank_transfer', 'cash']),
        ]);
    }

    /**
     * Create a {{modelNameSingularLowerCase}} with geographic data
     */
    public function withLocation(): static
    {
        return $this->state(fn (array $attributes) => [
            'latitude' => $this->faker->latitude,
            'longitude' => $this->faker->longitude,
            'timezone' => $this->faker->timezone,
            'country_code' => $this->faker->countryCode,
            'region' => $this->faker->state,
            'city' => $this->faker->city,
        ]);
    }

    /**
     * Create multiple {{modelNamePluralLowerCase}} in sequence
     */
    public function sequence(...$sequence): static
    {
        return $this->state(new \Illuminate\Database\Eloquent\Factories\Sequence(...$sequence));
    }

    /**
     * Configure the model factory.
     */
    public function configure(): static
    {
        return $this->afterMaking(function ({{modelName}} ${{modelNameSingularLowerCase}}) {
            // Perform actions after making the model instance
        })->afterCreating(function ({{modelName}} ${{modelNameSingularLowerCase}}) {
            // Perform actions after creating the model in the database
            
            // Example: Generate related data
            // if (${{modelNameSingularLowerCase}}->needs_related_data) {
            //     // Create related models
            // }
        });
    }
}
