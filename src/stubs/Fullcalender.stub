<?php

namespace Modules\{{getModuleInputModule}}\Fullcalendar;

use Modules\{{getModuleInputModule}}\Models\{{modelName}};
use Carbon\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Http\Request;

class {{modelName}}Calendar
{
    protected $model;
    protected $dateField;
    protected $titleField;
    protected $descriptionField;
    protected $statusField;
    protected $colors;

    public function __construct()
    {
        $this->model = new {{modelName}};
        $this->dateField = 'created_at'; // Default date field
        $this->titleField = $this->getFirstStringField(); // Auto-detect title field
        $this->descriptionField = 'description'; // Default description field
        $this->statusField = 'status'; // Default status field
        
        $this->colors = [
            'default' => '#007bff',
            'active' => '#28a745',
            'inactive' => '#6c757d',
            'pending' => '#ffc107',
            'completed' => '#17a2b8',
            'cancelled' => '#dc3545',
            'draft' => '#fd7e14',
            'published' => '#198754',
            'archived' => '#495057'
        ];
    }

    /**
     * Get events for FullCalendar
     */
    public function getEvents(Request $request): array
    {
        $start = Carbon::parse($request->input('start'));
        $end = Carbon::parse($request->input('end'));

        $events = $this->model::whereBetween($this->dateField, [$start, $end])
            ->get()
            ->map(function ($record) {
                return $this->transformToEvent($record);
            })
            ->toArray();

        return $events;
    }

    /**
     * Transform model record to FullCalendar event
     */
    protected function transformToEvent($record): array
    {
        $event = [
            'id' => $record->id,
            'title' => $this->getEventTitle($record),
            'start' => $this->getEventDate($record)->toISOString(),
            'end' => $this->getEventEndDate($record)->toISOString(),
            'url' => $this->getEventUrl($record),
            'backgroundColor' => $this->getEventColor($record),
            'borderColor' => $this->getEventColor($record),
            'textColor' => $this->getEventTextColor($record),
            'classNames' => $this->getEventClassNames($record),
            'extendedProps' => [
                'status' => $record->{$this->statusField} ?? 'default',
                'description' => $this->getEventDescription($record),
                'model_id' => $record->id,
                'model_type' => get_class($record),
                'created_at' => $record->created_at->toISOString(),
                'updated_at' => $record->updated_at->toISOString(),
                'tooltip' => $this->getEventTooltip($record),
                'additional_data' => $this->getAdditionalEventData($record)
            ]
        ];

        // Add recurring event properties if applicable
        if ($this->isRecurringEvent($record)) {
            $event = array_merge($event, $this->getRecurringEventProperties($record));
        }

        return $event;
    }

    /**
     * Get event title from record
     */
    protected function getEventTitle($record): string
    {
        $title = $record->{$this->titleField} ?? "{{modelName}} #{$record->id}";
        
        // Truncate if too long
        return strlen($title) > 50 ? substr($title, 0, 47) . '...' : $title;
    }

    /**
     * Get event start date
     */
    protected function getEventDate($record): Carbon
    {
        return Carbon::parse($record->{$this->dateField});
    }

    /**
     * Get event end date (can be customized based on your model)
     */
    protected function getEventEndDate($record): Carbon
    {
        // Check if model has an end_date field
        if (isset($record->end_date)) {
            return Carbon::parse($record->end_date);
        }
        
        // Check if model has a duration field (in hours)
        if (isset($record->duration)) {
            return $this->getEventDate($record)->addHours($record->duration);
        }
        
        // Default: event lasts 1 hour
        return $this->getEventDate($record)->addHour();
    }

    /**
     * Get event URL
     */
    protected function getEventUrl($record): string
    {
        return url("/{{getModuleInput}}/{{getNameInput}}/show/{$record->id}");
    }

    /**
     * Get event color based on status
     */
    protected function getEventColor($record): string
    {
        $status = $record->{$this->statusField} ?? 'default';
        return $this->colors[$status] ?? $this->colors['default'];
    }

    /**
     * Get event text color
     */
    protected function getEventTextColor($record): string
    {
        return '#ffffff'; // White text for all events
    }

    /**
     * Get event CSS class names
     */
    protected function getEventClassNames($record): array
    {
        $classes = ['calendar-event'];
        
        $status = $record->{$this->statusField} ?? 'default';
        $classes[] = "event-{$status}";
        
        // Add priority class if available
        if (isset($record->priority)) {
            $classes[] = "priority-{$record->priority}";
        }
        
        // Add category class if available
        if (isset($record->category)) {
            $classes[] = "category-" . str_slug($record->category);
        }
        
        return $classes;
    }

    /**
     * Get event description
     */
    protected function getEventDescription($record): string
    {
        return $record->{$this->descriptionField} ?? '';
    }

    /**
     * Get event tooltip content
     */
    protected function getEventTooltip($record): string
    {
        $tooltip = "<strong>{$this->getEventTitle($record)}</strong><br>";
        $tooltip .= "Date: " . $this->getEventDate($record)->format('M j, Y g:i A') . "<br>";
        
        if ($record->{$this->statusField}) {
            $tooltip .= "Status: " . ucfirst($record->{$this->statusField}) . "<br>";
        }
        
        $description = $this->getEventDescription($record);
        if ($description) {
            $tooltip .= "Description: " . Str::limit($description, 100);
        }
        
        return $tooltip;
    }

    /**
     * Get additional event data
     */
    protected function getAdditionalEventData($record): array
    {
        $data = [];
        
        // Add all fillable fields as additional data
        foreach ($record->getFillable() as $field) {
            if (isset($record->{$field}) && !in_array($field, [$this->dateField, $this->titleField, $this->descriptionField, $this->statusField])) {
                $data[$field] = $record->{$field};
            }
        }
        
        return $data;
    }

    /**
     * Check if event is recurring
     */
    protected function isRecurringEvent($record): bool
    {
        return isset($record->recurring) && $record->recurring;
    }

    /**
     * Get recurring event properties
     */
    protected function getRecurringEventProperties($record): array
    {
        $properties = [];
        
        if (isset($record->recurring_rule)) {
            $properties['rrule'] = $record->recurring_rule;
        }
        
        if (isset($record->recurring_frequency)) {
            $properties['frequency'] = $record->recurring_frequency;
        }
        
        return $properties;
    }

    /**
     * Create new event from calendar
     */
    public function createEvent(array $eventData): {{modelName}}
    {
        $data = [
            $this->dateField => Carbon::parse($eventData['start']),
            $this->titleField => $eventData['title'] ?? 'New {{modelName}}',
        ];
        
        // Add end date if provided
        if (isset($eventData['end'])) {
            $data['end_date'] = Carbon::parse($eventData['end']);
        }
        
        // Add description if provided
        if (isset($eventData['description'])) {
            $data[$this->descriptionField] = $eventData['description'];
        }
        
        // Add status if provided
        if (isset($eventData['status'])) {
            $data[$this->statusField] = $eventData['status'];
        }
        
        // Add any additional fields
        foreach ($eventData as $key => $value) {
            if (!in_array($key, ['start', 'end', 'title', 'description', 'status']) && 
                in_array($key, $this->model->getFillable())) {
                $data[$key] = $value;
            }
        }
        
        return $this->model::create($data);
    }

    /**
     * Update existing event
     */
    public function updateEvent(int $eventId, array $eventData): {{modelName}}
    {
        $event = $this->model::findOrFail($eventId);
        
        $data = [];
        
        // Update start date
        if (isset($eventData['start'])) {
            $data[$this->dateField] = Carbon::parse($eventData['start']);
        }
        
        // Update end date
        if (isset($eventData['end'])) {
            $data['end_date'] = Carbon::parse($eventData['end']);
        }
        
        // Update title
        if (isset($eventData['title'])) {
            $data[$this->titleField] = $eventData['title'];
        }
        
        // Update description
        if (isset($eventData['description'])) {
            $data[$this->descriptionField] = $eventData['description'];
        }
        
        // Update status
        if (isset($eventData['status'])) {
            $data[$this->statusField] = $eventData['status'];
        }
        
        // Update any additional fields
        foreach ($eventData as $key => $value) {
            if (!in_array($key, ['start', 'end', 'title', 'description', 'status', 'id']) && 
                in_array($key, $this->model->getFillable())) {
                $data[$key] = $value;
            }
        }
        
        $event->update($data);
        
        return $event->fresh();
    }

    /**
     * Delete event
     */
    public function deleteEvent(int $eventId): bool
    {
        $event = $this->model::findOrFail($eventId);
        return $event->delete();
    }

    /**
     * Get calendar configuration
     */
    public function getCalendarConfig(): array
    {
        return [
            'initialView' => 'dayGridMonth',
            'headerToolbar' => [
                'left' => 'prev,next today',
                'center' => 'title',
                'right' => 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
            ],
            'editable' => true,
            'selectable' => true,
            'selectMirror' => true,
            'dayMaxEvents' => true,
            'weekends' => true,
            'height' => 'auto',
            'aspectRatio' => 1.8,
            'eventDisplay' => 'block',
            'displayEventTime' => true,
            'allDaySlot' => false,
            'slotMinTime' => '06:00:00',
            'slotMaxTime' => '22:00:00',
            'slotDuration' => '00:30:00',
            'snapDuration' => '00:15:00',
            'businessHours' => [
                'daysOfWeek' => [1, 2, 3, 4, 5], // Monday - Friday
                'startTime' => '09:00',
                'endTime' => '17:00',
            ],
            'eventSources' => [
                [
                    'url' => url("/api/{{getModuleInput}}/{{getNameInput}}/calendar/events"),
                    'method' => 'GET',
                    'extraParams' => [
                        'model' => '{{modelName}}'
                    ],
                    'failure' => 'function() { alert("Error loading events"); }'
                ]
            ],
            'eventClassNames' => 'calendar-event',
            'eventBackgroundColor' => $this->colors['default'],
            'eventBorderColor' => $this->colors['default'],
            'eventTextColor' => '#ffffff',
            'nowIndicator' => true,
            'navLinks' => true,
            'weekNumbers' => false,
            'eventLimit' => true,
            'eventLimitText' => 'more',
            'timeZone' => config('app.timezone', 'UTC'),
            'locale' => app()->getLocale(),
            'firstDay' => 1, // Monday
            'fixedWeekCount' => false,
            'showNonCurrentDates' => false,
            'lazyFetching' => true,
            'eventOrder' => 'start,-duration,allDay,title'
        ];
    }

    /**
     * Get event statistics for dashboard
     */
    public function getEventStatistics(): array
    {
        $today = Carbon::today();
        $thisWeek = Carbon::now()->startOfWeek();
        $thisMonth = Carbon::now()->startOfMonth();
        
        return [
            'total_events' => $this->model::count(),
            'today_events' => $this->model::whereDate($this->dateField, $today)->count(),
            'week_events' => $this->model::where($this->dateField, '>=', $thisWeek)->count(),
            'month_events' => $this->model::where($this->dateField, '>=', $thisMonth)->count(),
            'upcoming_events' => $this->model::where($this->dateField, '>', Carbon::now())->count(),
            'past_events' => $this->model::where($this->dateField, '<', Carbon::now())->count(),
            'status_breakdown' => $this->getStatusBreakdown(),
            'monthly_distribution' => $this->getMonthlyDistribution(),
            'upcoming_schedule' => $this->getUpcomingSchedule(5)
        ];
    }

    /**
     * Get status breakdown
     */
    protected function getStatusBreakdown(): array
    {
        return $this->model::selectRaw("{$this->statusField} as status, COUNT(*) as count")
            ->whereNotNull($this->statusField)
            ->groupBy($this->statusField)
            ->pluck('count', 'status')
            ->toArray();
    }

    /**
     * Get monthly distribution
     */
    protected function getMonthlyDistribution(): array
    {
        return $this->model::selectRaw('MONTH(' . $this->dateField . ') as month, COUNT(*) as count')
            ->whereYear($this->dateField, Carbon::now()->year)
            ->groupBy('month')
            ->orderBy('month')
            ->get()
            ->mapWithKeys(function ($item) {
                return [Carbon::create()->month($item->month)->format('M') => $item->count];
            })
            ->toArray();
    }

    /**
     * Get upcoming schedule
     */
    protected function getUpcomingSchedule(int $limit = 5): array
    {
        return $this->model::where($this->dateField, '>', Carbon::now())
            ->orderBy($this->dateField)
            ->limit($limit)
            ->get()
            ->map(function ($record) {
                return [
                    'id' => $record->id,
                    'title' => $this->getEventTitle($record),
                    'date' => $this->getEventDate($record)->format('M j, Y g:i A'),
                    'status' => $record->{$this->statusField} ?? 'default',
                    'url' => $this->getEventUrl($record),
                    'time_until' => $this->getEventDate($record)->diffForHumans(),
                    'color' => $this->getEventColor($record)
                ];
            })
            ->toArray();
    }

    /**
     * Search events
     */
    public function searchEvents(string $query, Carbon $start = null, Carbon $end = null): Collection
    {
        $searchQuery = $this->model::query();
        
        // Search in title and description fields
        $searchQuery->where(function ($q) use ($query) {
            $q->where($this->titleField, 'LIKE', "%{$query}%");
            if ($this->descriptionField) {
                $q->orWhere($this->descriptionField, 'LIKE', "%{$query}%");
            }
        });
        
        // Apply date range if provided
        if ($start && $end) {
            $searchQuery->whereBetween($this->dateField, [$start, $end]);
        }
        
        return $searchQuery->orderBy($this->dateField)->get();
    }

    /**
     * Get events by status
     */
    public function getEventsByStatus(string $status): Collection
    {
        return $this->model::where($this->statusField, $status)
            ->orderBy($this->dateField)
            ->get();
    }

    /**
     * Get events for date range
     */
    public function getEventsForDateRange(Carbon $start, Carbon $end): Collection
    {
        return $this->model::whereBetween($this->dateField, [$start, $end])
            ->orderBy($this->dateField)
            ->get();
    }

    /**
     * Auto-detect first string field for title
     */
    protected function getFirstStringField(): string
    {
        $fillable = $this->model->getFillable();
        
        // Common title fields
        $titleFields = ['title', 'name', 'subject', 'summary', 'label'];
        
        foreach ($titleFields as $field) {
            if (in_array($field, $fillable)) {
                return $field;
            }
        }
        
        // Return first fillable field or fallback
        return $fillable[0] ?? 'id';
    }

    /**
     * Set custom date field
     */
    public function setDateField(string $field): self
    {
        $this->dateField = $field;
        return $this;
    }

    /**
     * Set custom title field
     */
    public function setTitleField(string $field): self
    {
        $this->titleField = $field;
        return $this;
    }

    /**
     * Set custom description field
     */
    public function setDescriptionField(string $field): self
    {
        $this->descriptionField = $field;
        return $this;
    }

    /**
     * Set custom status field
     */
    public function setStatusField(string $field): self
    {
        $this->statusField = $field;
        return $this;
    }

    /**
     * Set custom colors
     */
    public function setColors(array $colors): self
    {
        $this->colors = array_merge($this->colors, $colors);
        return $this;
    }

    /**
     * Export events to different formats
     */
    public function exportEvents(string $format = 'ical', Carbon $start = null, Carbon $end = null): string
    {
        $events = $this->getEventsForDateRange(
            $start ?? Carbon::now()->startOfMonth(),
            $end ?? Carbon::now()->endOfMonth()
        );
        
        switch (strtolower($format)) {
            case 'ical':
                return $this->exportToIcal($events);
            case 'csv':
                return $this->exportToCsv($events);
            case 'json':
                return $this->exportToJson($events);
            default:
                return $this->exportToJson($events);
        }
    }

    /**
     * Export to iCal format
     */
    protected function exportToIcal(Collection $events): string
    {
        $ical = "BEGIN:VCALENDAR\r\n";
        $ical .= "VERSION:2.0\r\n";
        $ical .= "PRODID:-//{{modelName}} Calendar//EN\r\n";
        $ical .= "CALSCALE:GREGORIAN\r\n";
        
        foreach ($events as $event) {
            $ical .= "BEGIN:VEVENT\r\n";
            $ical .= "UID:" . $event->id . "@" . request()->getHost() . "\r\n";
            $ical .= "DTSTART:" . $this->getEventDate($event)->format('Ymd\THis\Z') . "\r\n";
            $ical .= "DTEND:" . $this->getEventEndDate($event)->format('Ymd\THis\Z') . "\r\n";
            $ical .= "SUMMARY:" . $this->getEventTitle($event) . "\r\n";
            $ical .= "DESCRIPTION:" . str_replace(["\r\n", "\n", "\r"], "\\n", $this->getEventDescription($event)) . "\r\n";
            $ical .= "URL:" . $this->getEventUrl($event) . "\r\n";
            $ical .= "STATUS:" . strtoupper($event->{$this->statusField} ?? 'CONFIRMED') . "\r\n";
            $ical .= "CREATED:" . $event->created_at->format('Ymd\THis\Z') . "\r\n";
            $ical .= "LAST-MODIFIED:" . $event->updated_at->format('Ymd\THis\Z') . "\r\n";
            $ical .= "END:VEVENT\r\n";
        }
        
        $ical .= "END:VCALENDAR\r\n";
        
        return $ical;
    }

    /**
     * Export to CSV format
     */
    protected function exportToCsv(Collection $events): string
    {
        $csv = "Title,Start Date,End Date,Status,Description,URL\n";
        
        foreach ($events as $event) {
            $csv .= '"' . $this->getEventTitle($event) . '",';
            $csv .= '"' . $this->getEventDate($event)->format('Y-m-d H:i:s') . '",';
            $csv .= '"' . $this->getEventEndDate($event)->format('Y-m-d H:i:s') . '",';
            $csv .= '"' . ($event->{$this->statusField} ?? 'default') . '",';
            $csv .= '"' . str_replace('"', '""', $this->getEventDescription($event)) . '",';
            $csv .= '"' . $this->getEventUrl($event) . '"';
            $csv .= "\n";
        }
        
        return $csv;
    }

    /**
     * Export to JSON format
     */
    protected function exportToJson(Collection $events): string
    {
        $eventsData = $events->map(function ($event) {
            return $this->transformToEvent($event);
        });
        
        return json_encode($eventsData, JSON_PRETTY_PRINT);
    }
}